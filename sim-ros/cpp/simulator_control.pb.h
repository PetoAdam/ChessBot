// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simulator_control.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_simulator_5fcontrol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_simulator_5fcontrol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_simulator_5fcontrol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_simulator_5fcontrol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_simulator_5fcontrol_2eproto;
namespace chessbot_simulator_control {
class Acknowledge;
class AcknowledgeDefaultTypeInternal;
extern AcknowledgeDefaultTypeInternal _Acknowledge_default_instance_;
class GripperPositionGoal;
class GripperPositionGoalDefaultTypeInternal;
extern GripperPositionGoalDefaultTypeInternal _GripperPositionGoal_default_instance_;
class GripperState;
class GripperStateDefaultTypeInternal;
extern GripperStateDefaultTypeInternal _GripperState_default_instance_;
class GripperStateRequest;
class GripperStateRequestDefaultTypeInternal;
extern GripperStateRequestDefaultTypeInternal _GripperStateRequest_default_instance_;
class JointEffortLimit;
class JointEffortLimitDefaultTypeInternal;
extern JointEffortLimitDefaultTypeInternal _JointEffortLimit_default_instance_;
class JointLimit;
class JointLimitDefaultTypeInternal;
extern JointLimitDefaultTypeInternal _JointLimit_default_instance_;
class JointPositionGoal;
class JointPositionGoalDefaultTypeInternal;
extern JointPositionGoalDefaultTypeInternal _JointPositionGoal_default_instance_;
class JointPositionGoalByAxisId;
class JointPositionGoalByAxisIdDefaultTypeInternal;
extern JointPositionGoalByAxisIdDefaultTypeInternal _JointPositionGoalByAxisId_default_instance_;
class JointPositionLimit;
class JointPositionLimitDefaultTypeInternal;
extern JointPositionLimitDefaultTypeInternal _JointPositionLimit_default_instance_;
class JointState;
class JointStateDefaultTypeInternal;
extern JointStateDefaultTypeInternal _JointState_default_instance_;
class JointStateRequest;
class JointStateRequestDefaultTypeInternal;
extern JointStateRequestDefaultTypeInternal _JointStateRequest_default_instance_;
class JointStateRequestByAxisId;
class JointStateRequestByAxisIdDefaultTypeInternal;
extern JointStateRequestByAxisIdDefaultTypeInternal _JointStateRequestByAxisId_default_instance_;
class JointStates;
class JointStatesDefaultTypeInternal;
extern JointStatesDefaultTypeInternal _JointStates_default_instance_;
class JointTorqueGoal;
class JointTorqueGoalDefaultTypeInternal;
extern JointTorqueGoalDefaultTypeInternal _JointTorqueGoal_default_instance_;
class JointTorqueGoalByAxisId;
class JointTorqueGoalByAxisIdDefaultTypeInternal;
extern JointTorqueGoalByAxisIdDefaultTypeInternal _JointTorqueGoalByAxisId_default_instance_;
class JointVelocityGoal;
class JointVelocityGoalDefaultTypeInternal;
extern JointVelocityGoalDefaultTypeInternal _JointVelocityGoal_default_instance_;
class JointVelocityGoalByAxisId;
class JointVelocityGoalByAxisIdDefaultTypeInternal;
extern JointVelocityGoalByAxisIdDefaultTypeInternal _JointVelocityGoalByAxisId_default_instance_;
class JointVelocityLimit;
class JointVelocityLimitDefaultTypeInternal;
extern JointVelocityLimitDefaultTypeInternal _JointVelocityLimit_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class RobotParameter;
class RobotParameterDefaultTypeInternal;
extern RobotParameterDefaultTypeInternal _RobotParameter_default_instance_;
class RobotParameterRequest;
class RobotParameterRequestDefaultTypeInternal;
extern RobotParameterRequestDefaultTypeInternal _RobotParameterRequest_default_instance_;
}  // namespace chessbot_simulator_control
PROTOBUF_NAMESPACE_OPEN
template<> ::chessbot_simulator_control::Acknowledge* Arena::CreateMaybeMessage<::chessbot_simulator_control::Acknowledge>(Arena*);
template<> ::chessbot_simulator_control::GripperPositionGoal* Arena::CreateMaybeMessage<::chessbot_simulator_control::GripperPositionGoal>(Arena*);
template<> ::chessbot_simulator_control::GripperState* Arena::CreateMaybeMessage<::chessbot_simulator_control::GripperState>(Arena*);
template<> ::chessbot_simulator_control::GripperStateRequest* Arena::CreateMaybeMessage<::chessbot_simulator_control::GripperStateRequest>(Arena*);
template<> ::chessbot_simulator_control::JointEffortLimit* Arena::CreateMaybeMessage<::chessbot_simulator_control::JointEffortLimit>(Arena*);
template<> ::chessbot_simulator_control::JointLimit* Arena::CreateMaybeMessage<::chessbot_simulator_control::JointLimit>(Arena*);
template<> ::chessbot_simulator_control::JointPositionGoal* Arena::CreateMaybeMessage<::chessbot_simulator_control::JointPositionGoal>(Arena*);
template<> ::chessbot_simulator_control::JointPositionGoalByAxisId* Arena::CreateMaybeMessage<::chessbot_simulator_control::JointPositionGoalByAxisId>(Arena*);
template<> ::chessbot_simulator_control::JointPositionLimit* Arena::CreateMaybeMessage<::chessbot_simulator_control::JointPositionLimit>(Arena*);
template<> ::chessbot_simulator_control::JointState* Arena::CreateMaybeMessage<::chessbot_simulator_control::JointState>(Arena*);
template<> ::chessbot_simulator_control::JointStateRequest* Arena::CreateMaybeMessage<::chessbot_simulator_control::JointStateRequest>(Arena*);
template<> ::chessbot_simulator_control::JointStateRequestByAxisId* Arena::CreateMaybeMessage<::chessbot_simulator_control::JointStateRequestByAxisId>(Arena*);
template<> ::chessbot_simulator_control::JointStates* Arena::CreateMaybeMessage<::chessbot_simulator_control::JointStates>(Arena*);
template<> ::chessbot_simulator_control::JointTorqueGoal* Arena::CreateMaybeMessage<::chessbot_simulator_control::JointTorqueGoal>(Arena*);
template<> ::chessbot_simulator_control::JointTorqueGoalByAxisId* Arena::CreateMaybeMessage<::chessbot_simulator_control::JointTorqueGoalByAxisId>(Arena*);
template<> ::chessbot_simulator_control::JointVelocityGoal* Arena::CreateMaybeMessage<::chessbot_simulator_control::JointVelocityGoal>(Arena*);
template<> ::chessbot_simulator_control::JointVelocityGoalByAxisId* Arena::CreateMaybeMessage<::chessbot_simulator_control::JointVelocityGoalByAxisId>(Arena*);
template<> ::chessbot_simulator_control::JointVelocityLimit* Arena::CreateMaybeMessage<::chessbot_simulator_control::JointVelocityLimit>(Arena*);
template<> ::chessbot_simulator_control::Request* Arena::CreateMaybeMessage<::chessbot_simulator_control::Request>(Arena*);
template<> ::chessbot_simulator_control::RobotParameter* Arena::CreateMaybeMessage<::chessbot_simulator_control::RobotParameter>(Arena*);
template<> ::chessbot_simulator_control::RobotParameterRequest* Arena::CreateMaybeMessage<::chessbot_simulator_control::RobotParameterRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chessbot_simulator_control {

enum Request_MessageType : int {
  Request_MessageType_UNSPECIFIED = 0,
  Request_MessageType_SET_JOINT_POSITION = 1,
  Request_MessageType_SET_JOINT_VELOCITY = 2,
  Request_MessageType_SET_JOINT_TORQUE = 3,
  Request_MessageType_SET_JOINT_POSITION_BY_AXIS_ID = 4,
  Request_MessageType_SET_JOINT_VELOCITY_BY_AXIS_ID = 5,
  Request_MessageType_SET_JOINT_TORQUE_BY_AXIS_ID = 6,
  Request_MessageType_GET_JOINT_STATE = 7,
  Request_MessageType_GET_JOINT_STATE_BY_AXIS_ID = 8,
  Request_MessageType_SET_GRIPPER_POSITION = 9,
  Request_MessageType_GET_GRIPPER_STATE = 10,
  Request_MessageType_GET_ROBOT_PARAMETER = 11,
  Request_MessageType_Request_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Request_MessageType_Request_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Request_MessageType_IsValid(int value);
constexpr Request_MessageType Request_MessageType_MessageType_MIN = Request_MessageType_UNSPECIFIED;
constexpr Request_MessageType Request_MessageType_MessageType_MAX = Request_MessageType_GET_ROBOT_PARAMETER;
constexpr int Request_MessageType_MessageType_ARRAYSIZE = Request_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_MessageType_descriptor();
template<typename T>
inline const std::string& Request_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Request_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Request_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Request_MessageType_descriptor(), enum_t_value);
}
inline bool Request_MessageType_Parse(
    const std::string& name, Request_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Request_MessageType>(
    Request_MessageType_descriptor(), name, value);
}
enum JointLimit_JointType : int {
  JointLimit_JointType_JOINT_TYPE_UNSPECIFIED = 0,
  JointLimit_JointType_ROTATIONAL = 1,
  JointLimit_JointType_TRANSLATIONAL = 2,
  JointLimit_JointType_JointLimit_JointType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  JointLimit_JointType_JointLimit_JointType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool JointLimit_JointType_IsValid(int value);
constexpr JointLimit_JointType JointLimit_JointType_JointType_MIN = JointLimit_JointType_JOINT_TYPE_UNSPECIFIED;
constexpr JointLimit_JointType JointLimit_JointType_JointType_MAX = JointLimit_JointType_TRANSLATIONAL;
constexpr int JointLimit_JointType_JointType_ARRAYSIZE = JointLimit_JointType_JointType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JointLimit_JointType_descriptor();
template<typename T>
inline const std::string& JointLimit_JointType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JointLimit_JointType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JointLimit_JointType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JointLimit_JointType_descriptor(), enum_t_value);
}
inline bool JointLimit_JointType_Parse(
    const std::string& name, JointLimit_JointType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JointLimit_JointType>(
    JointLimit_JointType_descriptor(), name, value);
}
// ===================================================================

class JointPositionGoal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chessbot_simulator_control.JointPositionGoal) */ {
 public:
  inline JointPositionGoal() : JointPositionGoal(nullptr) {};
  virtual ~JointPositionGoal();

  JointPositionGoal(const JointPositionGoal& from);
  JointPositionGoal(JointPositionGoal&& from) noexcept
    : JointPositionGoal() {
    *this = ::std::move(from);
  }

  inline JointPositionGoal& operator=(const JointPositionGoal& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointPositionGoal& operator=(JointPositionGoal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JointPositionGoal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointPositionGoal* internal_default_instance() {
    return reinterpret_cast<const JointPositionGoal*>(
               &_JointPositionGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JointPositionGoal& a, JointPositionGoal& b) {
    a.Swap(&b);
  }
  inline void Swap(JointPositionGoal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointPositionGoal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointPositionGoal* New() const final {
    return CreateMaybeMessage<JointPositionGoal>(nullptr);
  }

  JointPositionGoal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointPositionGoal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointPositionGoal& from);
  void MergeFrom(const JointPositionGoal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointPositionGoal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chessbot_simulator_control.JointPositionGoal";
  }
  protected:
  explicit JointPositionGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_5fcontrol_2eproto);
    return ::descriptor_table_simulator_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
  };
  // repeated double position = 1;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  double _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position() const;
  void _internal_add_position(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position();
  public:
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position();

  // @@protoc_insertion_point(class_scope:chessbot_simulator_control.JointPositionGoal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_;
  mutable std::atomic<int> _position_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class JointVelocityGoal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chessbot_simulator_control.JointVelocityGoal) */ {
 public:
  inline JointVelocityGoal() : JointVelocityGoal(nullptr) {};
  virtual ~JointVelocityGoal();

  JointVelocityGoal(const JointVelocityGoal& from);
  JointVelocityGoal(JointVelocityGoal&& from) noexcept
    : JointVelocityGoal() {
    *this = ::std::move(from);
  }

  inline JointVelocityGoal& operator=(const JointVelocityGoal& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointVelocityGoal& operator=(JointVelocityGoal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JointVelocityGoal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointVelocityGoal* internal_default_instance() {
    return reinterpret_cast<const JointVelocityGoal*>(
               &_JointVelocityGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(JointVelocityGoal& a, JointVelocityGoal& b) {
    a.Swap(&b);
  }
  inline void Swap(JointVelocityGoal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointVelocityGoal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointVelocityGoal* New() const final {
    return CreateMaybeMessage<JointVelocityGoal>(nullptr);
  }

  JointVelocityGoal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointVelocityGoal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointVelocityGoal& from);
  void MergeFrom(const JointVelocityGoal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointVelocityGoal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chessbot_simulator_control.JointVelocityGoal";
  }
  protected:
  explicit JointVelocityGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_5fcontrol_2eproto);
    return ::descriptor_table_simulator_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityFieldNumber = 1,
  };
  // repeated double velocity = 1;
  int velocity_size() const;
  private:
  int _internal_velocity_size() const;
  public:
  void clear_velocity();
  private:
  double _internal_velocity(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_velocity() const;
  void _internal_add_velocity(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_velocity();
  public:
  double velocity(int index) const;
  void set_velocity(int index, double value);
  void add_velocity(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      velocity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_velocity();

  // @@protoc_insertion_point(class_scope:chessbot_simulator_control.JointVelocityGoal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > velocity_;
  mutable std::atomic<int> _velocity_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class JointTorqueGoal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chessbot_simulator_control.JointTorqueGoal) */ {
 public:
  inline JointTorqueGoal() : JointTorqueGoal(nullptr) {};
  virtual ~JointTorqueGoal();

  JointTorqueGoal(const JointTorqueGoal& from);
  JointTorqueGoal(JointTorqueGoal&& from) noexcept
    : JointTorqueGoal() {
    *this = ::std::move(from);
  }

  inline JointTorqueGoal& operator=(const JointTorqueGoal& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointTorqueGoal& operator=(JointTorqueGoal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JointTorqueGoal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointTorqueGoal* internal_default_instance() {
    return reinterpret_cast<const JointTorqueGoal*>(
               &_JointTorqueGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(JointTorqueGoal& a, JointTorqueGoal& b) {
    a.Swap(&b);
  }
  inline void Swap(JointTorqueGoal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointTorqueGoal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointTorqueGoal* New() const final {
    return CreateMaybeMessage<JointTorqueGoal>(nullptr);
  }

  JointTorqueGoal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointTorqueGoal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointTorqueGoal& from);
  void MergeFrom(const JointTorqueGoal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointTorqueGoal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chessbot_simulator_control.JointTorqueGoal";
  }
  protected:
  explicit JointTorqueGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_5fcontrol_2eproto);
    return ::descriptor_table_simulator_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTorqueFieldNumber = 1,
  };
  // repeated double torque = 1;
  int torque_size() const;
  private:
  int _internal_torque_size() const;
  public:
  void clear_torque();
  private:
  double _internal_torque(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_torque() const;
  void _internal_add_torque(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_torque();
  public:
  double torque(int index) const;
  void set_torque(int index, double value);
  void add_torque(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      torque() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_torque();

  // @@protoc_insertion_point(class_scope:chessbot_simulator_control.JointTorqueGoal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > torque_;
  mutable std::atomic<int> _torque_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class JointPositionGoalByAxisId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chessbot_simulator_control.JointPositionGoalByAxisId) */ {
 public:
  inline JointPositionGoalByAxisId() : JointPositionGoalByAxisId(nullptr) {};
  virtual ~JointPositionGoalByAxisId();

  JointPositionGoalByAxisId(const JointPositionGoalByAxisId& from);
  JointPositionGoalByAxisId(JointPositionGoalByAxisId&& from) noexcept
    : JointPositionGoalByAxisId() {
    *this = ::std::move(from);
  }

  inline JointPositionGoalByAxisId& operator=(const JointPositionGoalByAxisId& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointPositionGoalByAxisId& operator=(JointPositionGoalByAxisId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JointPositionGoalByAxisId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointPositionGoalByAxisId* internal_default_instance() {
    return reinterpret_cast<const JointPositionGoalByAxisId*>(
               &_JointPositionGoalByAxisId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(JointPositionGoalByAxisId& a, JointPositionGoalByAxisId& b) {
    a.Swap(&b);
  }
  inline void Swap(JointPositionGoalByAxisId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointPositionGoalByAxisId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointPositionGoalByAxisId* New() const final {
    return CreateMaybeMessage<JointPositionGoalByAxisId>(nullptr);
  }

  JointPositionGoalByAxisId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointPositionGoalByAxisId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointPositionGoalByAxisId& from);
  void MergeFrom(const JointPositionGoalByAxisId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointPositionGoalByAxisId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chessbot_simulator_control.JointPositionGoalByAxisId";
  }
  protected:
  explicit JointPositionGoalByAxisId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_5fcontrol_2eproto);
    return ::descriptor_table_simulator_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kAxisIdFieldNumber = 1,
  };
  // double position = 2;
  void clear_position();
  double position() const;
  void set_position(double value);
  private:
  double _internal_position() const;
  void _internal_set_position(double value);
  public:

  // int32 axis_id = 1;
  void clear_axis_id();
  ::PROTOBUF_NAMESPACE_ID::int32 axis_id() const;
  void set_axis_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis_id() const;
  void _internal_set_axis_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chessbot_simulator_control.JointPositionGoalByAxisId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double position_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class JointVelocityGoalByAxisId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chessbot_simulator_control.JointVelocityGoalByAxisId) */ {
 public:
  inline JointVelocityGoalByAxisId() : JointVelocityGoalByAxisId(nullptr) {};
  virtual ~JointVelocityGoalByAxisId();

  JointVelocityGoalByAxisId(const JointVelocityGoalByAxisId& from);
  JointVelocityGoalByAxisId(JointVelocityGoalByAxisId&& from) noexcept
    : JointVelocityGoalByAxisId() {
    *this = ::std::move(from);
  }

  inline JointVelocityGoalByAxisId& operator=(const JointVelocityGoalByAxisId& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointVelocityGoalByAxisId& operator=(JointVelocityGoalByAxisId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JointVelocityGoalByAxisId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointVelocityGoalByAxisId* internal_default_instance() {
    return reinterpret_cast<const JointVelocityGoalByAxisId*>(
               &_JointVelocityGoalByAxisId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(JointVelocityGoalByAxisId& a, JointVelocityGoalByAxisId& b) {
    a.Swap(&b);
  }
  inline void Swap(JointVelocityGoalByAxisId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointVelocityGoalByAxisId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointVelocityGoalByAxisId* New() const final {
    return CreateMaybeMessage<JointVelocityGoalByAxisId>(nullptr);
  }

  JointVelocityGoalByAxisId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointVelocityGoalByAxisId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointVelocityGoalByAxisId& from);
  void MergeFrom(const JointVelocityGoalByAxisId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointVelocityGoalByAxisId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chessbot_simulator_control.JointVelocityGoalByAxisId";
  }
  protected:
  explicit JointVelocityGoalByAxisId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_5fcontrol_2eproto);
    return ::descriptor_table_simulator_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityFieldNumber = 2,
    kAxisIdFieldNumber = 1,
  };
  // double velocity = 2;
  void clear_velocity();
  double velocity() const;
  void set_velocity(double value);
  private:
  double _internal_velocity() const;
  void _internal_set_velocity(double value);
  public:

  // int32 axis_id = 1;
  void clear_axis_id();
  ::PROTOBUF_NAMESPACE_ID::int32 axis_id() const;
  void set_axis_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis_id() const;
  void _internal_set_axis_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chessbot_simulator_control.JointVelocityGoalByAxisId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double velocity_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class JointTorqueGoalByAxisId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chessbot_simulator_control.JointTorqueGoalByAxisId) */ {
 public:
  inline JointTorqueGoalByAxisId() : JointTorqueGoalByAxisId(nullptr) {};
  virtual ~JointTorqueGoalByAxisId();

  JointTorqueGoalByAxisId(const JointTorqueGoalByAxisId& from);
  JointTorqueGoalByAxisId(JointTorqueGoalByAxisId&& from) noexcept
    : JointTorqueGoalByAxisId() {
    *this = ::std::move(from);
  }

  inline JointTorqueGoalByAxisId& operator=(const JointTorqueGoalByAxisId& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointTorqueGoalByAxisId& operator=(JointTorqueGoalByAxisId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JointTorqueGoalByAxisId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointTorqueGoalByAxisId* internal_default_instance() {
    return reinterpret_cast<const JointTorqueGoalByAxisId*>(
               &_JointTorqueGoalByAxisId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(JointTorqueGoalByAxisId& a, JointTorqueGoalByAxisId& b) {
    a.Swap(&b);
  }
  inline void Swap(JointTorqueGoalByAxisId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointTorqueGoalByAxisId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointTorqueGoalByAxisId* New() const final {
    return CreateMaybeMessage<JointTorqueGoalByAxisId>(nullptr);
  }

  JointTorqueGoalByAxisId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointTorqueGoalByAxisId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointTorqueGoalByAxisId& from);
  void MergeFrom(const JointTorqueGoalByAxisId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointTorqueGoalByAxisId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chessbot_simulator_control.JointTorqueGoalByAxisId";
  }
  protected:
  explicit JointTorqueGoalByAxisId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_5fcontrol_2eproto);
    return ::descriptor_table_simulator_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTorqueFieldNumber = 2,
    kAxisIdFieldNumber = 1,
  };
  // double torque = 2;
  void clear_torque();
  double torque() const;
  void set_torque(double value);
  private:
  double _internal_torque() const;
  void _internal_set_torque(double value);
  public:

  // int32 axis_id = 1;
  void clear_axis_id();
  ::PROTOBUF_NAMESPACE_ID::int32 axis_id() const;
  void set_axis_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis_id() const;
  void _internal_set_axis_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chessbot_simulator_control.JointTorqueGoalByAxisId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double torque_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class JointStateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chessbot_simulator_control.JointStateRequest) */ {
 public:
  inline JointStateRequest() : JointStateRequest(nullptr) {};
  virtual ~JointStateRequest();

  JointStateRequest(const JointStateRequest& from);
  JointStateRequest(JointStateRequest&& from) noexcept
    : JointStateRequest() {
    *this = ::std::move(from);
  }

  inline JointStateRequest& operator=(const JointStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointStateRequest& operator=(JointStateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JointStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointStateRequest* internal_default_instance() {
    return reinterpret_cast<const JointStateRequest*>(
               &_JointStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(JointStateRequest& a, JointStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JointStateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointStateRequest* New() const final {
    return CreateMaybeMessage<JointStateRequest>(nullptr);
  }

  JointStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointStateRequest& from);
  void MergeFrom(const JointStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chessbot_simulator_control.JointStateRequest";
  }
  protected:
  explicit JointStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_5fcontrol_2eproto);
    return ::descriptor_table_simulator_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:chessbot_simulator_control.JointStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class JointStateRequestByAxisId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chessbot_simulator_control.JointStateRequestByAxisId) */ {
 public:
  inline JointStateRequestByAxisId() : JointStateRequestByAxisId(nullptr) {};
  virtual ~JointStateRequestByAxisId();

  JointStateRequestByAxisId(const JointStateRequestByAxisId& from);
  JointStateRequestByAxisId(JointStateRequestByAxisId&& from) noexcept
    : JointStateRequestByAxisId() {
    *this = ::std::move(from);
  }

  inline JointStateRequestByAxisId& operator=(const JointStateRequestByAxisId& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointStateRequestByAxisId& operator=(JointStateRequestByAxisId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JointStateRequestByAxisId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointStateRequestByAxisId* internal_default_instance() {
    return reinterpret_cast<const JointStateRequestByAxisId*>(
               &_JointStateRequestByAxisId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(JointStateRequestByAxisId& a, JointStateRequestByAxisId& b) {
    a.Swap(&b);
  }
  inline void Swap(JointStateRequestByAxisId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointStateRequestByAxisId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointStateRequestByAxisId* New() const final {
    return CreateMaybeMessage<JointStateRequestByAxisId>(nullptr);
  }

  JointStateRequestByAxisId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointStateRequestByAxisId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointStateRequestByAxisId& from);
  void MergeFrom(const JointStateRequestByAxisId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointStateRequestByAxisId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chessbot_simulator_control.JointStateRequestByAxisId";
  }
  protected:
  explicit JointStateRequestByAxisId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_5fcontrol_2eproto);
    return ::descriptor_table_simulator_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxisIdFieldNumber = 1,
  };
  // int32 axis_id = 1;
  void clear_axis_id();
  ::PROTOBUF_NAMESPACE_ID::int32 axis_id() const;
  void set_axis_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis_id() const;
  void _internal_set_axis_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chessbot_simulator_control.JointStateRequestByAxisId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class GripperPositionGoal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chessbot_simulator_control.GripperPositionGoal) */ {
 public:
  inline GripperPositionGoal() : GripperPositionGoal(nullptr) {};
  virtual ~GripperPositionGoal();

  GripperPositionGoal(const GripperPositionGoal& from);
  GripperPositionGoal(GripperPositionGoal&& from) noexcept
    : GripperPositionGoal() {
    *this = ::std::move(from);
  }

  inline GripperPositionGoal& operator=(const GripperPositionGoal& from) {
    CopyFrom(from);
    return *this;
  }
  inline GripperPositionGoal& operator=(GripperPositionGoal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GripperPositionGoal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GripperPositionGoal* internal_default_instance() {
    return reinterpret_cast<const GripperPositionGoal*>(
               &_GripperPositionGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GripperPositionGoal& a, GripperPositionGoal& b) {
    a.Swap(&b);
  }
  inline void Swap(GripperPositionGoal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GripperPositionGoal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GripperPositionGoal* New() const final {
    return CreateMaybeMessage<GripperPositionGoal>(nullptr);
  }

  GripperPositionGoal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GripperPositionGoal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GripperPositionGoal& from);
  void MergeFrom(const GripperPositionGoal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GripperPositionGoal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chessbot_simulator_control.GripperPositionGoal";
  }
  protected:
  explicit GripperPositionGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_5fcontrol_2eproto);
    return ::descriptor_table_simulator_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
  };
  // double position = 1;
  void clear_position();
  double position() const;
  void set_position(double value);
  private:
  double _internal_position() const;
  void _internal_set_position(double value);
  public:

  // @@protoc_insertion_point(class_scope:chessbot_simulator_control.GripperPositionGoal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class GripperStateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chessbot_simulator_control.GripperStateRequest) */ {
 public:
  inline GripperStateRequest() : GripperStateRequest(nullptr) {};
  virtual ~GripperStateRequest();

  GripperStateRequest(const GripperStateRequest& from);
  GripperStateRequest(GripperStateRequest&& from) noexcept
    : GripperStateRequest() {
    *this = ::std::move(from);
  }

  inline GripperStateRequest& operator=(const GripperStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GripperStateRequest& operator=(GripperStateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GripperStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GripperStateRequest* internal_default_instance() {
    return reinterpret_cast<const GripperStateRequest*>(
               &_GripperStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GripperStateRequest& a, GripperStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GripperStateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GripperStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GripperStateRequest* New() const final {
    return CreateMaybeMessage<GripperStateRequest>(nullptr);
  }

  GripperStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GripperStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GripperStateRequest& from);
  void MergeFrom(const GripperStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GripperStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chessbot_simulator_control.GripperStateRequest";
  }
  protected:
  explicit GripperStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_5fcontrol_2eproto);
    return ::descriptor_table_simulator_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:chessbot_simulator_control.GripperStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class RobotParameterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chessbot_simulator_control.RobotParameterRequest) */ {
 public:
  inline RobotParameterRequest() : RobotParameterRequest(nullptr) {};
  virtual ~RobotParameterRequest();

  RobotParameterRequest(const RobotParameterRequest& from);
  RobotParameterRequest(RobotParameterRequest&& from) noexcept
    : RobotParameterRequest() {
    *this = ::std::move(from);
  }

  inline RobotParameterRequest& operator=(const RobotParameterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotParameterRequest& operator=(RobotParameterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RobotParameterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotParameterRequest* internal_default_instance() {
    return reinterpret_cast<const RobotParameterRequest*>(
               &_RobotParameterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RobotParameterRequest& a, RobotParameterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotParameterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotParameterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotParameterRequest* New() const final {
    return CreateMaybeMessage<RobotParameterRequest>(nullptr);
  }

  RobotParameterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotParameterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RobotParameterRequest& from);
  void MergeFrom(const RobotParameterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotParameterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chessbot_simulator_control.RobotParameterRequest";
  }
  protected:
  explicit RobotParameterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_5fcontrol_2eproto);
    return ::descriptor_table_simulator_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:chessbot_simulator_control.RobotParameterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chessbot_simulator_control.Request) */ {
 public:
  inline Request() : Request(nullptr) {};
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chessbot_simulator_control.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_5fcontrol_2eproto);
    return ::descriptor_table_simulator_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Request_MessageType MessageType;
  static constexpr MessageType UNSPECIFIED =
    Request_MessageType_UNSPECIFIED;
  static constexpr MessageType SET_JOINT_POSITION =
    Request_MessageType_SET_JOINT_POSITION;
  static constexpr MessageType SET_JOINT_VELOCITY =
    Request_MessageType_SET_JOINT_VELOCITY;
  static constexpr MessageType SET_JOINT_TORQUE =
    Request_MessageType_SET_JOINT_TORQUE;
  static constexpr MessageType SET_JOINT_POSITION_BY_AXIS_ID =
    Request_MessageType_SET_JOINT_POSITION_BY_AXIS_ID;
  static constexpr MessageType SET_JOINT_VELOCITY_BY_AXIS_ID =
    Request_MessageType_SET_JOINT_VELOCITY_BY_AXIS_ID;
  static constexpr MessageType SET_JOINT_TORQUE_BY_AXIS_ID =
    Request_MessageType_SET_JOINT_TORQUE_BY_AXIS_ID;
  static constexpr MessageType GET_JOINT_STATE =
    Request_MessageType_GET_JOINT_STATE;
  static constexpr MessageType GET_JOINT_STATE_BY_AXIS_ID =
    Request_MessageType_GET_JOINT_STATE_BY_AXIS_ID;
  static constexpr MessageType SET_GRIPPER_POSITION =
    Request_MessageType_SET_GRIPPER_POSITION;
  static constexpr MessageType GET_GRIPPER_STATE =
    Request_MessageType_GET_GRIPPER_STATE;
  static constexpr MessageType GET_ROBOT_PARAMETER =
    Request_MessageType_GET_ROBOT_PARAMETER;
  static inline bool MessageType_IsValid(int value) {
    return Request_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    Request_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    Request_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    Request_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return Request_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return Request_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(const std::string& name,
      MessageType* value) {
    return Request_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSetJointPositionFieldNumber = 2,
    kSetJointVelocityFieldNumber = 3,
    kSetJointTorqueFieldNumber = 4,
    kSetJointPositionByAxisIdFieldNumber = 5,
    kSetJointVelocityByAxisIdFieldNumber = 6,
    kSetJointTorqueByAxisIdFieldNumber = 7,
    kGetJointStateFieldNumber = 8,
    kGetJointStateByAxisIdFieldNumber = 9,
    kSetGripperPositionFieldNumber = 10,
    kGetGripperStateFieldNumber = 11,
    kRobotParameterGetFieldNumber = 12,
    kTypeFieldNumber = 1,
  };
  // .chessbot_simulator_control.JointPositionGoal set_joint_position = 2;
  bool has_set_joint_position() const;
  private:
  bool _internal_has_set_joint_position() const;
  public:
  void clear_set_joint_position();
  const ::chessbot_simulator_control::JointPositionGoal& set_joint_position() const;
  ::chessbot_simulator_control::JointPositionGoal* release_set_joint_position();
  ::chessbot_simulator_control::JointPositionGoal* mutable_set_joint_position();
  void set_allocated_set_joint_position(::chessbot_simulator_control::JointPositionGoal* set_joint_position);
  private:
  const ::chessbot_simulator_control::JointPositionGoal& _internal_set_joint_position() const;
  ::chessbot_simulator_control::JointPositionGoal* _internal_mutable_set_joint_position();
  public:
  void unsafe_arena_set_allocated_set_joint_position(
      ::chessbot_simulator_control::JointPositionGoal* set_joint_position);
  ::chessbot_simulator_control::JointPositionGoal* unsafe_arena_release_set_joint_position();

  // .chessbot_simulator_control.JointVelocityGoal set_joint_velocity = 3;
  bool has_set_joint_velocity() const;
  private:
  bool _internal_has_set_joint_velocity() const;
  public:
  void clear_set_joint_velocity();
  const ::chessbot_simulator_control::JointVelocityGoal& set_joint_velocity() const;
  ::chessbot_simulator_control::JointVelocityGoal* release_set_joint_velocity();
  ::chessbot_simulator_control::JointVelocityGoal* mutable_set_joint_velocity();
  void set_allocated_set_joint_velocity(::chessbot_simulator_control::JointVelocityGoal* set_joint_velocity);
  private:
  const ::chessbot_simulator_control::JointVelocityGoal& _internal_set_joint_velocity() const;
  ::chessbot_simulator_control::JointVelocityGoal* _internal_mutable_set_joint_velocity();
  public:
  void unsafe_arena_set_allocated_set_joint_velocity(
      ::chessbot_simulator_control::JointVelocityGoal* set_joint_velocity);
  ::chessbot_simulator_control::JointVelocityGoal* unsafe_arena_release_set_joint_velocity();

  // .chessbot_simulator_control.JointTorqueGoal set_joint_torque = 4;
  bool has_set_joint_torque() const;
  private:
  bool _internal_has_set_joint_torque() const;
  public:
  void clear_set_joint_torque();
  const ::chessbot_simulator_control::JointTorqueGoal& set_joint_torque() const;
  ::chessbot_simulator_control::JointTorqueGoal* release_set_joint_torque();
  ::chessbot_simulator_control::JointTorqueGoal* mutable_set_joint_torque();
  void set_allocated_set_joint_torque(::chessbot_simulator_control::JointTorqueGoal* set_joint_torque);
  private:
  const ::chessbot_simulator_control::JointTorqueGoal& _internal_set_joint_torque() const;
  ::chessbot_simulator_control::JointTorqueGoal* _internal_mutable_set_joint_torque();
  public:
  void unsafe_arena_set_allocated_set_joint_torque(
      ::chessbot_simulator_control::JointTorqueGoal* set_joint_torque);
  ::chessbot_simulator_control::JointTorqueGoal* unsafe_arena_release_set_joint_torque();

  // .chessbot_simulator_control.JointPositionGoalByAxisId set_joint_position_by_axis_id = 5;
  bool has_set_joint_position_by_axis_id() const;
  private:
  bool _internal_has_set_joint_position_by_axis_id() const;
  public:
  void clear_set_joint_position_by_axis_id();
  const ::chessbot_simulator_control::JointPositionGoalByAxisId& set_joint_position_by_axis_id() const;
  ::chessbot_simulator_control::JointPositionGoalByAxisId* release_set_joint_position_by_axis_id();
  ::chessbot_simulator_control::JointPositionGoalByAxisId* mutable_set_joint_position_by_axis_id();
  void set_allocated_set_joint_position_by_axis_id(::chessbot_simulator_control::JointPositionGoalByAxisId* set_joint_position_by_axis_id);
  private:
  const ::chessbot_simulator_control::JointPositionGoalByAxisId& _internal_set_joint_position_by_axis_id() const;
  ::chessbot_simulator_control::JointPositionGoalByAxisId* _internal_mutable_set_joint_position_by_axis_id();
  public:
  void unsafe_arena_set_allocated_set_joint_position_by_axis_id(
      ::chessbot_simulator_control::JointPositionGoalByAxisId* set_joint_position_by_axis_id);
  ::chessbot_simulator_control::JointPositionGoalByAxisId* unsafe_arena_release_set_joint_position_by_axis_id();

  // .chessbot_simulator_control.JointVelocityGoalByAxisId set_joint_velocity_by_axis_id = 6;
  bool has_set_joint_velocity_by_axis_id() const;
  private:
  bool _internal_has_set_joint_velocity_by_axis_id() const;
  public:
  void clear_set_joint_velocity_by_axis_id();
  const ::chessbot_simulator_control::JointVelocityGoalByAxisId& set_joint_velocity_by_axis_id() const;
  ::chessbot_simulator_control::JointVelocityGoalByAxisId* release_set_joint_velocity_by_axis_id();
  ::chessbot_simulator_control::JointVelocityGoalByAxisId* mutable_set_joint_velocity_by_axis_id();
  void set_allocated_set_joint_velocity_by_axis_id(::chessbot_simulator_control::JointVelocityGoalByAxisId* set_joint_velocity_by_axis_id);
  private:
  const ::chessbot_simulator_control::JointVelocityGoalByAxisId& _internal_set_joint_velocity_by_axis_id() const;
  ::chessbot_simulator_control::JointVelocityGoalByAxisId* _internal_mutable_set_joint_velocity_by_axis_id();
  public:
  void unsafe_arena_set_allocated_set_joint_velocity_by_axis_id(
      ::chessbot_simulator_control::JointVelocityGoalByAxisId* set_joint_velocity_by_axis_id);
  ::chessbot_simulator_control::JointVelocityGoalByAxisId* unsafe_arena_release_set_joint_velocity_by_axis_id();

  // .chessbot_simulator_control.JointTorqueGoalByAxisId set_joint_torque_by_axis_id = 7;
  bool has_set_joint_torque_by_axis_id() const;
  private:
  bool _internal_has_set_joint_torque_by_axis_id() const;
  public:
  void clear_set_joint_torque_by_axis_id();
  const ::chessbot_simulator_control::JointTorqueGoalByAxisId& set_joint_torque_by_axis_id() const;
  ::chessbot_simulator_control::JointTorqueGoalByAxisId* release_set_joint_torque_by_axis_id();
  ::chessbot_simulator_control::JointTorqueGoalByAxisId* mutable_set_joint_torque_by_axis_id();
  void set_allocated_set_joint_torque_by_axis_id(::chessbot_simulator_control::JointTorqueGoalByAxisId* set_joint_torque_by_axis_id);
  private:
  const ::chessbot_simulator_control::JointTorqueGoalByAxisId& _internal_set_joint_torque_by_axis_id() const;
  ::chessbot_simulator_control::JointTorqueGoalByAxisId* _internal_mutable_set_joint_torque_by_axis_id();
  public:
  void unsafe_arena_set_allocated_set_joint_torque_by_axis_id(
      ::chessbot_simulator_control::JointTorqueGoalByAxisId* set_joint_torque_by_axis_id);
  ::chessbot_simulator_control::JointTorqueGoalByAxisId* unsafe_arena_release_set_joint_torque_by_axis_id();

  // .chessbot_simulator_control.JointStateRequest get_joint_state = 8;
  bool has_get_joint_state() const;
  private:
  bool _internal_has_get_joint_state() const;
  public:
  void clear_get_joint_state();
  const ::chessbot_simulator_control::JointStateRequest& get_joint_state() const;
  ::chessbot_simulator_control::JointStateRequest* release_get_joint_state();
  ::chessbot_simulator_control::JointStateRequest* mutable_get_joint_state();
  void set_allocated_get_joint_state(::chessbot_simulator_control::JointStateRequest* get_joint_state);
  private:
  const ::chessbot_simulator_control::JointStateRequest& _internal_get_joint_state() const;
  ::chessbot_simulator_control::JointStateRequest* _internal_mutable_get_joint_state();
  public:
  void unsafe_arena_set_allocated_get_joint_state(
      ::chessbot_simulator_control::JointStateRequest* get_joint_state);
  ::chessbot_simulator_control::JointStateRequest* unsafe_arena_release_get_joint_state();

  // .chessbot_simulator_control.JointStateRequestByAxisId get_joint_state_by_axis_id = 9;
  bool has_get_joint_state_by_axis_id() const;
  private:
  bool _internal_has_get_joint_state_by_axis_id() const;
  public:
  void clear_get_joint_state_by_axis_id();
  const ::chessbot_simulator_control::JointStateRequestByAxisId& get_joint_state_by_axis_id() const;
  ::chessbot_simulator_control::JointStateRequestByAxisId* release_get_joint_state_by_axis_id();
  ::chessbot_simulator_control::JointStateRequestByAxisId* mutable_get_joint_state_by_axis_id();
  void set_allocated_get_joint_state_by_axis_id(::chessbot_simulator_control::JointStateRequestByAxisId* get_joint_state_by_axis_id);
  private:
  const ::chessbot_simulator_control::JointStateRequestByAxisId& _internal_get_joint_state_by_axis_id() const;
  ::chessbot_simulator_control::JointStateRequestByAxisId* _internal_mutable_get_joint_state_by_axis_id();
  public:
  void unsafe_arena_set_allocated_get_joint_state_by_axis_id(
      ::chessbot_simulator_control::JointStateRequestByAxisId* get_joint_state_by_axis_id);
  ::chessbot_simulator_control::JointStateRequestByAxisId* unsafe_arena_release_get_joint_state_by_axis_id();

  // .chessbot_simulator_control.GripperPositionGoal set_gripper_position = 10;
  bool has_set_gripper_position() const;
  private:
  bool _internal_has_set_gripper_position() const;
  public:
  void clear_set_gripper_position();
  const ::chessbot_simulator_control::GripperPositionGoal& set_gripper_position() const;
  ::chessbot_simulator_control::GripperPositionGoal* release_set_gripper_position();
  ::chessbot_simulator_control::GripperPositionGoal* mutable_set_gripper_position();
  void set_allocated_set_gripper_position(::chessbot_simulator_control::GripperPositionGoal* set_gripper_position);
  private:
  const ::chessbot_simulator_control::GripperPositionGoal& _internal_set_gripper_position() const;
  ::chessbot_simulator_control::GripperPositionGoal* _internal_mutable_set_gripper_position();
  public:
  void unsafe_arena_set_allocated_set_gripper_position(
      ::chessbot_simulator_control::GripperPositionGoal* set_gripper_position);
  ::chessbot_simulator_control::GripperPositionGoal* unsafe_arena_release_set_gripper_position();

  // .chessbot_simulator_control.GripperStateRequest get_gripper_state = 11;
  bool has_get_gripper_state() const;
  private:
  bool _internal_has_get_gripper_state() const;
  public:
  void clear_get_gripper_state();
  const ::chessbot_simulator_control::GripperStateRequest& get_gripper_state() const;
  ::chessbot_simulator_control::GripperStateRequest* release_get_gripper_state();
  ::chessbot_simulator_control::GripperStateRequest* mutable_get_gripper_state();
  void set_allocated_get_gripper_state(::chessbot_simulator_control::GripperStateRequest* get_gripper_state);
  private:
  const ::chessbot_simulator_control::GripperStateRequest& _internal_get_gripper_state() const;
  ::chessbot_simulator_control::GripperStateRequest* _internal_mutable_get_gripper_state();
  public:
  void unsafe_arena_set_allocated_get_gripper_state(
      ::chessbot_simulator_control::GripperStateRequest* get_gripper_state);
  ::chessbot_simulator_control::GripperStateRequest* unsafe_arena_release_get_gripper_state();

  // .chessbot_simulator_control.RobotParameterRequest robot_parameter_get = 12;
  bool has_robot_parameter_get() const;
  private:
  bool _internal_has_robot_parameter_get() const;
  public:
  void clear_robot_parameter_get();
  const ::chessbot_simulator_control::RobotParameterRequest& robot_parameter_get() const;
  ::chessbot_simulator_control::RobotParameterRequest* release_robot_parameter_get();
  ::chessbot_simulator_control::RobotParameterRequest* mutable_robot_parameter_get();
  void set_allocated_robot_parameter_get(::chessbot_simulator_control::RobotParameterRequest* robot_parameter_get);
  private:
  const ::chessbot_simulator_control::RobotParameterRequest& _internal_robot_parameter_get() const;
  ::chessbot_simulator_control::RobotParameterRequest* _internal_mutable_robot_parameter_get();
  public:
  void unsafe_arena_set_allocated_robot_parameter_get(
      ::chessbot_simulator_control::RobotParameterRequest* robot_parameter_get);
  ::chessbot_simulator_control::RobotParameterRequest* unsafe_arena_release_robot_parameter_get();

  // .chessbot_simulator_control.Request.MessageType type = 1;
  void clear_type();
  ::chessbot_simulator_control::Request_MessageType type() const;
  void set_type(::chessbot_simulator_control::Request_MessageType value);
  private:
  ::chessbot_simulator_control::Request_MessageType _internal_type() const;
  void _internal_set_type(::chessbot_simulator_control::Request_MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:chessbot_simulator_control.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::chessbot_simulator_control::JointPositionGoal* set_joint_position_;
  ::chessbot_simulator_control::JointVelocityGoal* set_joint_velocity_;
  ::chessbot_simulator_control::JointTorqueGoal* set_joint_torque_;
  ::chessbot_simulator_control::JointPositionGoalByAxisId* set_joint_position_by_axis_id_;
  ::chessbot_simulator_control::JointVelocityGoalByAxisId* set_joint_velocity_by_axis_id_;
  ::chessbot_simulator_control::JointTorqueGoalByAxisId* set_joint_torque_by_axis_id_;
  ::chessbot_simulator_control::JointStateRequest* get_joint_state_;
  ::chessbot_simulator_control::JointStateRequestByAxisId* get_joint_state_by_axis_id_;
  ::chessbot_simulator_control::GripperPositionGoal* set_gripper_position_;
  ::chessbot_simulator_control::GripperStateRequest* get_gripper_state_;
  ::chessbot_simulator_control::RobotParameterRequest* robot_parameter_get_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class JointPositionLimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chessbot_simulator_control.JointPositionLimit) */ {
 public:
  inline JointPositionLimit() : JointPositionLimit(nullptr) {};
  virtual ~JointPositionLimit();

  JointPositionLimit(const JointPositionLimit& from);
  JointPositionLimit(JointPositionLimit&& from) noexcept
    : JointPositionLimit() {
    *this = ::std::move(from);
  }

  inline JointPositionLimit& operator=(const JointPositionLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointPositionLimit& operator=(JointPositionLimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JointPositionLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointPositionLimit* internal_default_instance() {
    return reinterpret_cast<const JointPositionLimit*>(
               &_JointPositionLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(JointPositionLimit& a, JointPositionLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(JointPositionLimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointPositionLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointPositionLimit* New() const final {
    return CreateMaybeMessage<JointPositionLimit>(nullptr);
  }

  JointPositionLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointPositionLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointPositionLimit& from);
  void MergeFrom(const JointPositionLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointPositionLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chessbot_simulator_control.JointPositionLimit";
  }
  protected:
  explicit JointPositionLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_5fcontrol_2eproto);
    return ::descriptor_table_simulator_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpperLimitFieldNumber = 1,
    kLowerLimitFieldNumber = 2,
  };
  // double upper_limit = 1;
  void clear_upper_limit();
  double upper_limit() const;
  void set_upper_limit(double value);
  private:
  double _internal_upper_limit() const;
  void _internal_set_upper_limit(double value);
  public:

  // double lower_limit = 2;
  void clear_lower_limit();
  double lower_limit() const;
  void set_lower_limit(double value);
  private:
  double _internal_lower_limit() const;
  void _internal_set_lower_limit(double value);
  public:

  // @@protoc_insertion_point(class_scope:chessbot_simulator_control.JointPositionLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double upper_limit_;
  double lower_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class JointVelocityLimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chessbot_simulator_control.JointVelocityLimit) */ {
 public:
  inline JointVelocityLimit() : JointVelocityLimit(nullptr) {};
  virtual ~JointVelocityLimit();

  JointVelocityLimit(const JointVelocityLimit& from);
  JointVelocityLimit(JointVelocityLimit&& from) noexcept
    : JointVelocityLimit() {
    *this = ::std::move(from);
  }

  inline JointVelocityLimit& operator=(const JointVelocityLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointVelocityLimit& operator=(JointVelocityLimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JointVelocityLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointVelocityLimit* internal_default_instance() {
    return reinterpret_cast<const JointVelocityLimit*>(
               &_JointVelocityLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(JointVelocityLimit& a, JointVelocityLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(JointVelocityLimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointVelocityLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointVelocityLimit* New() const final {
    return CreateMaybeMessage<JointVelocityLimit>(nullptr);
  }

  JointVelocityLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointVelocityLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointVelocityLimit& from);
  void MergeFrom(const JointVelocityLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointVelocityLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chessbot_simulator_control.JointVelocityLimit";
  }
  protected:
  explicit JointVelocityLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_5fcontrol_2eproto);
    return ::descriptor_table_simulator_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpperLimitFieldNumber = 1,
    kLowerLimitFieldNumber = 2,
  };
  // double upper_limit = 1;
  void clear_upper_limit();
  double upper_limit() const;
  void set_upper_limit(double value);
  private:
  double _internal_upper_limit() const;
  void _internal_set_upper_limit(double value);
  public:

  // double lower_limit = 2;
  void clear_lower_limit();
  double lower_limit() const;
  void set_lower_limit(double value);
  private:
  double _internal_lower_limit() const;
  void _internal_set_lower_limit(double value);
  public:

  // @@protoc_insertion_point(class_scope:chessbot_simulator_control.JointVelocityLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double upper_limit_;
  double lower_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class JointEffortLimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chessbot_simulator_control.JointEffortLimit) */ {
 public:
  inline JointEffortLimit() : JointEffortLimit(nullptr) {};
  virtual ~JointEffortLimit();

  JointEffortLimit(const JointEffortLimit& from);
  JointEffortLimit(JointEffortLimit&& from) noexcept
    : JointEffortLimit() {
    *this = ::std::move(from);
  }

  inline JointEffortLimit& operator=(const JointEffortLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointEffortLimit& operator=(JointEffortLimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JointEffortLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointEffortLimit* internal_default_instance() {
    return reinterpret_cast<const JointEffortLimit*>(
               &_JointEffortLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(JointEffortLimit& a, JointEffortLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(JointEffortLimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointEffortLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointEffortLimit* New() const final {
    return CreateMaybeMessage<JointEffortLimit>(nullptr);
  }

  JointEffortLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointEffortLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointEffortLimit& from);
  void MergeFrom(const JointEffortLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointEffortLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chessbot_simulator_control.JointEffortLimit";
  }
  protected:
  explicit JointEffortLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_5fcontrol_2eproto);
    return ::descriptor_table_simulator_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpperLimitFieldNumber = 1,
    kLowerLimitFieldNumber = 2,
  };
  // double upper_limit = 1;
  void clear_upper_limit();
  double upper_limit() const;
  void set_upper_limit(double value);
  private:
  double _internal_upper_limit() const;
  void _internal_set_upper_limit(double value);
  public:

  // double lower_limit = 2;
  void clear_lower_limit();
  double lower_limit() const;
  void set_lower_limit(double value);
  private:
  double _internal_lower_limit() const;
  void _internal_set_lower_limit(double value);
  public:

  // @@protoc_insertion_point(class_scope:chessbot_simulator_control.JointEffortLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double upper_limit_;
  double lower_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class JointLimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chessbot_simulator_control.JointLimit) */ {
 public:
  inline JointLimit() : JointLimit(nullptr) {};
  virtual ~JointLimit();

  JointLimit(const JointLimit& from);
  JointLimit(JointLimit&& from) noexcept
    : JointLimit() {
    *this = ::std::move(from);
  }

  inline JointLimit& operator=(const JointLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointLimit& operator=(JointLimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JointLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointLimit* internal_default_instance() {
    return reinterpret_cast<const JointLimit*>(
               &_JointLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(JointLimit& a, JointLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(JointLimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointLimit* New() const final {
    return CreateMaybeMessage<JointLimit>(nullptr);
  }

  JointLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointLimit& from);
  void MergeFrom(const JointLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chessbot_simulator_control.JointLimit";
  }
  protected:
  explicit JointLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_5fcontrol_2eproto);
    return ::descriptor_table_simulator_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef JointLimit_JointType JointType;
  static constexpr JointType JOINT_TYPE_UNSPECIFIED =
    JointLimit_JointType_JOINT_TYPE_UNSPECIFIED;
  static constexpr JointType ROTATIONAL =
    JointLimit_JointType_ROTATIONAL;
  static constexpr JointType TRANSLATIONAL =
    JointLimit_JointType_TRANSLATIONAL;
  static inline bool JointType_IsValid(int value) {
    return JointLimit_JointType_IsValid(value);
  }
  static constexpr JointType JointType_MIN =
    JointLimit_JointType_JointType_MIN;
  static constexpr JointType JointType_MAX =
    JointLimit_JointType_JointType_MAX;
  static constexpr int JointType_ARRAYSIZE =
    JointLimit_JointType_JointType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  JointType_descriptor() {
    return JointLimit_JointType_descriptor();
  }
  template<typename T>
  static inline const std::string& JointType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, JointType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function JointType_Name.");
    return JointLimit_JointType_Name(enum_t_value);
  }
  static inline bool JointType_Parse(const std::string& name,
      JointType* value) {
    return JointLimit_JointType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPositionLimitFieldNumber = 2,
    kVelocityLimitFieldNumber = 3,
    kEffortLimitFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // .chessbot_simulator_control.JointPositionLimit position_limit = 2;
  bool has_position_limit() const;
  private:
  bool _internal_has_position_limit() const;
  public:
  void clear_position_limit();
  const ::chessbot_simulator_control::JointPositionLimit& position_limit() const;
  ::chessbot_simulator_control::JointPositionLimit* release_position_limit();
  ::chessbot_simulator_control::JointPositionLimit* mutable_position_limit();
  void set_allocated_position_limit(::chessbot_simulator_control::JointPositionLimit* position_limit);
  private:
  const ::chessbot_simulator_control::JointPositionLimit& _internal_position_limit() const;
  ::chessbot_simulator_control::JointPositionLimit* _internal_mutable_position_limit();
  public:
  void unsafe_arena_set_allocated_position_limit(
      ::chessbot_simulator_control::JointPositionLimit* position_limit);
  ::chessbot_simulator_control::JointPositionLimit* unsafe_arena_release_position_limit();

  // .chessbot_simulator_control.JointVelocityLimit velocity_limit = 3;
  bool has_velocity_limit() const;
  private:
  bool _internal_has_velocity_limit() const;
  public:
  void clear_velocity_limit();
  const ::chessbot_simulator_control::JointVelocityLimit& velocity_limit() const;
  ::chessbot_simulator_control::JointVelocityLimit* release_velocity_limit();
  ::chessbot_simulator_control::JointVelocityLimit* mutable_velocity_limit();
  void set_allocated_velocity_limit(::chessbot_simulator_control::JointVelocityLimit* velocity_limit);
  private:
  const ::chessbot_simulator_control::JointVelocityLimit& _internal_velocity_limit() const;
  ::chessbot_simulator_control::JointVelocityLimit* _internal_mutable_velocity_limit();
  public:
  void unsafe_arena_set_allocated_velocity_limit(
      ::chessbot_simulator_control::JointVelocityLimit* velocity_limit);
  ::chessbot_simulator_control::JointVelocityLimit* unsafe_arena_release_velocity_limit();

  // .chessbot_simulator_control.JointEffortLimit effort_limit = 4;
  bool has_effort_limit() const;
  private:
  bool _internal_has_effort_limit() const;
  public:
  void clear_effort_limit();
  const ::chessbot_simulator_control::JointEffortLimit& effort_limit() const;
  ::chessbot_simulator_control::JointEffortLimit* release_effort_limit();
  ::chessbot_simulator_control::JointEffortLimit* mutable_effort_limit();
  void set_allocated_effort_limit(::chessbot_simulator_control::JointEffortLimit* effort_limit);
  private:
  const ::chessbot_simulator_control::JointEffortLimit& _internal_effort_limit() const;
  ::chessbot_simulator_control::JointEffortLimit* _internal_mutable_effort_limit();
  public:
  void unsafe_arena_set_allocated_effort_limit(
      ::chessbot_simulator_control::JointEffortLimit* effort_limit);
  ::chessbot_simulator_control::JointEffortLimit* unsafe_arena_release_effort_limit();

  // .chessbot_simulator_control.JointLimit.JointType type = 1;
  void clear_type();
  ::chessbot_simulator_control::JointLimit_JointType type() const;
  void set_type(::chessbot_simulator_control::JointLimit_JointType value);
  private:
  ::chessbot_simulator_control::JointLimit_JointType _internal_type() const;
  void _internal_set_type(::chessbot_simulator_control::JointLimit_JointType value);
  public:

  // @@protoc_insertion_point(class_scope:chessbot_simulator_control.JointLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::chessbot_simulator_control::JointPositionLimit* position_limit_;
  ::chessbot_simulator_control::JointVelocityLimit* velocity_limit_;
  ::chessbot_simulator_control::JointEffortLimit* effort_limit_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class RobotParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chessbot_simulator_control.RobotParameter) */ {
 public:
  inline RobotParameter() : RobotParameter(nullptr) {};
  virtual ~RobotParameter();

  RobotParameter(const RobotParameter& from);
  RobotParameter(RobotParameter&& from) noexcept
    : RobotParameter() {
    *this = ::std::move(from);
  }

  inline RobotParameter& operator=(const RobotParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotParameter& operator=(RobotParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RobotParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotParameter* internal_default_instance() {
    return reinterpret_cast<const RobotParameter*>(
               &_RobotParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RobotParameter& a, RobotParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotParameter* New() const final {
    return CreateMaybeMessage<RobotParameter>(nullptr);
  }

  RobotParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RobotParameter& from);
  void MergeFrom(const RobotParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chessbot_simulator_control.RobotParameter";
  }
  protected:
  explicit RobotParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_5fcontrol_2eproto);
    return ::descriptor_table_simulator_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJointLimitFieldNumber = 2,
    kAxesNumberFieldNumber = 1,
  };
  // repeated .chessbot_simulator_control.JointLimit joint_limit = 2;
  int joint_limit_size() const;
  private:
  int _internal_joint_limit_size() const;
  public:
  void clear_joint_limit();
  ::chessbot_simulator_control::JointLimit* mutable_joint_limit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chessbot_simulator_control::JointLimit >*
      mutable_joint_limit();
  private:
  const ::chessbot_simulator_control::JointLimit& _internal_joint_limit(int index) const;
  ::chessbot_simulator_control::JointLimit* _internal_add_joint_limit();
  public:
  const ::chessbot_simulator_control::JointLimit& joint_limit(int index) const;
  ::chessbot_simulator_control::JointLimit* add_joint_limit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chessbot_simulator_control::JointLimit >&
      joint_limit() const;

  // int32 axes_number = 1;
  void clear_axes_number();
  ::PROTOBUF_NAMESPACE_ID::int32 axes_number() const;
  void set_axes_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axes_number() const;
  void _internal_set_axes_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chessbot_simulator_control.RobotParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chessbot_simulator_control::JointLimit > joint_limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 axes_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class JointState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chessbot_simulator_control.JointState) */ {
 public:
  inline JointState() : JointState(nullptr) {};
  virtual ~JointState();

  JointState(const JointState& from);
  JointState(JointState&& from) noexcept
    : JointState() {
    *this = ::std::move(from);
  }

  inline JointState& operator=(const JointState& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointState& operator=(JointState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JointState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointState* internal_default_instance() {
    return reinterpret_cast<const JointState*>(
               &_JointState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(JointState& a, JointState& b) {
    a.Swap(&b);
  }
  inline void Swap(JointState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointState* New() const final {
    return CreateMaybeMessage<JointState>(nullptr);
  }

  JointState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointState& from);
  void MergeFrom(const JointState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chessbot_simulator_control.JointState";
  }
  protected:
  explicit JointState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_5fcontrol_2eproto);
    return ::descriptor_table_simulator_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kTorqueFieldNumber = 4,
    kAxisIdFieldNumber = 1,
  };
  // double position = 2;
  void clear_position();
  double position() const;
  void set_position(double value);
  private:
  double _internal_position() const;
  void _internal_set_position(double value);
  public:

  // double velocity = 3;
  void clear_velocity();
  double velocity() const;
  void set_velocity(double value);
  private:
  double _internal_velocity() const;
  void _internal_set_velocity(double value);
  public:

  // double torque = 4;
  void clear_torque();
  double torque() const;
  void set_torque(double value);
  private:
  double _internal_torque() const;
  void _internal_set_torque(double value);
  public:

  // int32 axis_id = 1;
  void clear_axis_id();
  ::PROTOBUF_NAMESPACE_ID::int32 axis_id() const;
  void set_axis_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis_id() const;
  void _internal_set_axis_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chessbot_simulator_control.JointState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double position_;
  double velocity_;
  double torque_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class JointStates PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chessbot_simulator_control.JointStates) */ {
 public:
  inline JointStates() : JointStates(nullptr) {};
  virtual ~JointStates();

  JointStates(const JointStates& from);
  JointStates(JointStates&& from) noexcept
    : JointStates() {
    *this = ::std::move(from);
  }

  inline JointStates& operator=(const JointStates& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointStates& operator=(JointStates&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JointStates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointStates* internal_default_instance() {
    return reinterpret_cast<const JointStates*>(
               &_JointStates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(JointStates& a, JointStates& b) {
    a.Swap(&b);
  }
  inline void Swap(JointStates* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointStates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointStates* New() const final {
    return CreateMaybeMessage<JointStates>(nullptr);
  }

  JointStates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointStates>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointStates& from);
  void MergeFrom(const JointStates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointStates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chessbot_simulator_control.JointStates";
  }
  protected:
  explicit JointStates(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_5fcontrol_2eproto);
    return ::descriptor_table_simulator_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 1,
  };
  // repeated .chessbot_simulator_control.JointState states = 1;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  ::chessbot_simulator_control::JointState* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chessbot_simulator_control::JointState >*
      mutable_states();
  private:
  const ::chessbot_simulator_control::JointState& _internal_states(int index) const;
  ::chessbot_simulator_control::JointState* _internal_add_states();
  public:
  const ::chessbot_simulator_control::JointState& states(int index) const;
  ::chessbot_simulator_control::JointState* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chessbot_simulator_control::JointState >&
      states() const;

  // @@protoc_insertion_point(class_scope:chessbot_simulator_control.JointStates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chessbot_simulator_control::JointState > states_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class GripperState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chessbot_simulator_control.GripperState) */ {
 public:
  inline GripperState() : GripperState(nullptr) {};
  virtual ~GripperState();

  GripperState(const GripperState& from);
  GripperState(GripperState&& from) noexcept
    : GripperState() {
    *this = ::std::move(from);
  }

  inline GripperState& operator=(const GripperState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GripperState& operator=(GripperState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GripperState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GripperState* internal_default_instance() {
    return reinterpret_cast<const GripperState*>(
               &_GripperState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GripperState& a, GripperState& b) {
    a.Swap(&b);
  }
  inline void Swap(GripperState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GripperState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GripperState* New() const final {
    return CreateMaybeMessage<GripperState>(nullptr);
  }

  GripperState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GripperState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GripperState& from);
  void MergeFrom(const GripperState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GripperState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chessbot_simulator_control.GripperState";
  }
  protected:
  explicit GripperState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_5fcontrol_2eproto);
    return ::descriptor_table_simulator_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
  };
  // double position = 1;
  void clear_position();
  double position() const;
  void set_position(double value);
  private:
  double _internal_position() const;
  void _internal_set_position(double value);
  public:

  // @@protoc_insertion_point(class_scope:chessbot_simulator_control.GripperState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class Acknowledge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chessbot_simulator_control.Acknowledge) */ {
 public:
  inline Acknowledge() : Acknowledge(nullptr) {};
  virtual ~Acknowledge();

  Acknowledge(const Acknowledge& from);
  Acknowledge(Acknowledge&& from) noexcept
    : Acknowledge() {
    *this = ::std::move(from);
  }

  inline Acknowledge& operator=(const Acknowledge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Acknowledge& operator=(Acknowledge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Acknowledge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Acknowledge* internal_default_instance() {
    return reinterpret_cast<const Acknowledge*>(
               &_Acknowledge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Acknowledge& a, Acknowledge& b) {
    a.Swap(&b);
  }
  inline void Swap(Acknowledge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Acknowledge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Acknowledge* New() const final {
    return CreateMaybeMessage<Acknowledge>(nullptr);
  }

  Acknowledge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Acknowledge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Acknowledge& from);
  void MergeFrom(const Acknowledge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Acknowledge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chessbot_simulator_control.Acknowledge";
  }
  protected:
  explicit Acknowledge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulator_5fcontrol_2eproto);
    return ::descriptor_table_simulator_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcknowledgeFieldNumber = 1,
  };
  // string acknowledge = 1;
  void clear_acknowledge();
  const std::string& acknowledge() const;
  void set_acknowledge(const std::string& value);
  void set_acknowledge(std::string&& value);
  void set_acknowledge(const char* value);
  void set_acknowledge(const char* value, size_t size);
  std::string* mutable_acknowledge();
  std::string* release_acknowledge();
  void set_allocated_acknowledge(std::string* acknowledge);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_acknowledge();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_acknowledge(
      std::string* acknowledge);
  private:
  const std::string& _internal_acknowledge() const;
  void _internal_set_acknowledge(const std::string& value);
  std::string* _internal_mutable_acknowledge();
  public:

  // @@protoc_insertion_point(class_scope:chessbot_simulator_control.Acknowledge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acknowledge_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulator_5fcontrol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JointPositionGoal

// repeated double position = 1;
inline int JointPositionGoal::_internal_position_size() const {
  return position_.size();
}
inline int JointPositionGoal::position_size() const {
  return _internal_position_size();
}
inline void JointPositionGoal::clear_position() {
  position_.Clear();
}
inline double JointPositionGoal::_internal_position(int index) const {
  return position_.Get(index);
}
inline double JointPositionGoal::position(int index) const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointPositionGoal.position)
  return _internal_position(index);
}
inline void JointPositionGoal::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.JointPositionGoal.position)
}
inline void JointPositionGoal::_internal_add_position(double value) {
  position_.Add(value);
}
inline void JointPositionGoal::add_position(double value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:chessbot_simulator_control.JointPositionGoal.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointPositionGoal::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointPositionGoal::position() const {
  // @@protoc_insertion_point(field_list:chessbot_simulator_control.JointPositionGoal.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointPositionGoal::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointPositionGoal::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:chessbot_simulator_control.JointPositionGoal.position)
  return _internal_mutable_position();
}

// -------------------------------------------------------------------

// JointVelocityGoal

// repeated double velocity = 1;
inline int JointVelocityGoal::_internal_velocity_size() const {
  return velocity_.size();
}
inline int JointVelocityGoal::velocity_size() const {
  return _internal_velocity_size();
}
inline void JointVelocityGoal::clear_velocity() {
  velocity_.Clear();
}
inline double JointVelocityGoal::_internal_velocity(int index) const {
  return velocity_.Get(index);
}
inline double JointVelocityGoal::velocity(int index) const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointVelocityGoal.velocity)
  return _internal_velocity(index);
}
inline void JointVelocityGoal::set_velocity(int index, double value) {
  velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.JointVelocityGoal.velocity)
}
inline void JointVelocityGoal::_internal_add_velocity(double value) {
  velocity_.Add(value);
}
inline void JointVelocityGoal::add_velocity(double value) {
  _internal_add_velocity(value);
  // @@protoc_insertion_point(field_add:chessbot_simulator_control.JointVelocityGoal.velocity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointVelocityGoal::_internal_velocity() const {
  return velocity_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointVelocityGoal::velocity() const {
  // @@protoc_insertion_point(field_list:chessbot_simulator_control.JointVelocityGoal.velocity)
  return _internal_velocity();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointVelocityGoal::_internal_mutable_velocity() {
  return &velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointVelocityGoal::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable_list:chessbot_simulator_control.JointVelocityGoal.velocity)
  return _internal_mutable_velocity();
}

// -------------------------------------------------------------------

// JointTorqueGoal

// repeated double torque = 1;
inline int JointTorqueGoal::_internal_torque_size() const {
  return torque_.size();
}
inline int JointTorqueGoal::torque_size() const {
  return _internal_torque_size();
}
inline void JointTorqueGoal::clear_torque() {
  torque_.Clear();
}
inline double JointTorqueGoal::_internal_torque(int index) const {
  return torque_.Get(index);
}
inline double JointTorqueGoal::torque(int index) const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointTorqueGoal.torque)
  return _internal_torque(index);
}
inline void JointTorqueGoal::set_torque(int index, double value) {
  torque_.Set(index, value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.JointTorqueGoal.torque)
}
inline void JointTorqueGoal::_internal_add_torque(double value) {
  torque_.Add(value);
}
inline void JointTorqueGoal::add_torque(double value) {
  _internal_add_torque(value);
  // @@protoc_insertion_point(field_add:chessbot_simulator_control.JointTorqueGoal.torque)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointTorqueGoal::_internal_torque() const {
  return torque_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointTorqueGoal::torque() const {
  // @@protoc_insertion_point(field_list:chessbot_simulator_control.JointTorqueGoal.torque)
  return _internal_torque();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointTorqueGoal::_internal_mutable_torque() {
  return &torque_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointTorqueGoal::mutable_torque() {
  // @@protoc_insertion_point(field_mutable_list:chessbot_simulator_control.JointTorqueGoal.torque)
  return _internal_mutable_torque();
}

// -------------------------------------------------------------------

// JointPositionGoalByAxisId

// int32 axis_id = 1;
inline void JointPositionGoalByAxisId::clear_axis_id() {
  axis_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JointPositionGoalByAxisId::_internal_axis_id() const {
  return axis_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JointPositionGoalByAxisId::axis_id() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointPositionGoalByAxisId.axis_id)
  return _internal_axis_id();
}
inline void JointPositionGoalByAxisId::_internal_set_axis_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axis_id_ = value;
}
inline void JointPositionGoalByAxisId::set_axis_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis_id(value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.JointPositionGoalByAxisId.axis_id)
}

// double position = 2;
inline void JointPositionGoalByAxisId::clear_position() {
  position_ = 0;
}
inline double JointPositionGoalByAxisId::_internal_position() const {
  return position_;
}
inline double JointPositionGoalByAxisId::position() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointPositionGoalByAxisId.position)
  return _internal_position();
}
inline void JointPositionGoalByAxisId::_internal_set_position(double value) {
  
  position_ = value;
}
inline void JointPositionGoalByAxisId::set_position(double value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.JointPositionGoalByAxisId.position)
}

// -------------------------------------------------------------------

// JointVelocityGoalByAxisId

// int32 axis_id = 1;
inline void JointVelocityGoalByAxisId::clear_axis_id() {
  axis_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JointVelocityGoalByAxisId::_internal_axis_id() const {
  return axis_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JointVelocityGoalByAxisId::axis_id() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointVelocityGoalByAxisId.axis_id)
  return _internal_axis_id();
}
inline void JointVelocityGoalByAxisId::_internal_set_axis_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axis_id_ = value;
}
inline void JointVelocityGoalByAxisId::set_axis_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis_id(value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.JointVelocityGoalByAxisId.axis_id)
}

// double velocity = 2;
inline void JointVelocityGoalByAxisId::clear_velocity() {
  velocity_ = 0;
}
inline double JointVelocityGoalByAxisId::_internal_velocity() const {
  return velocity_;
}
inline double JointVelocityGoalByAxisId::velocity() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointVelocityGoalByAxisId.velocity)
  return _internal_velocity();
}
inline void JointVelocityGoalByAxisId::_internal_set_velocity(double value) {
  
  velocity_ = value;
}
inline void JointVelocityGoalByAxisId::set_velocity(double value) {
  _internal_set_velocity(value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.JointVelocityGoalByAxisId.velocity)
}

// -------------------------------------------------------------------

// JointTorqueGoalByAxisId

// int32 axis_id = 1;
inline void JointTorqueGoalByAxisId::clear_axis_id() {
  axis_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JointTorqueGoalByAxisId::_internal_axis_id() const {
  return axis_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JointTorqueGoalByAxisId::axis_id() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointTorqueGoalByAxisId.axis_id)
  return _internal_axis_id();
}
inline void JointTorqueGoalByAxisId::_internal_set_axis_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axis_id_ = value;
}
inline void JointTorqueGoalByAxisId::set_axis_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis_id(value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.JointTorqueGoalByAxisId.axis_id)
}

// double torque = 2;
inline void JointTorqueGoalByAxisId::clear_torque() {
  torque_ = 0;
}
inline double JointTorqueGoalByAxisId::_internal_torque() const {
  return torque_;
}
inline double JointTorqueGoalByAxisId::torque() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointTorqueGoalByAxisId.torque)
  return _internal_torque();
}
inline void JointTorqueGoalByAxisId::_internal_set_torque(double value) {
  
  torque_ = value;
}
inline void JointTorqueGoalByAxisId::set_torque(double value) {
  _internal_set_torque(value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.JointTorqueGoalByAxisId.torque)
}

// -------------------------------------------------------------------

// JointStateRequest

// -------------------------------------------------------------------

// JointStateRequestByAxisId

// int32 axis_id = 1;
inline void JointStateRequestByAxisId::clear_axis_id() {
  axis_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JointStateRequestByAxisId::_internal_axis_id() const {
  return axis_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JointStateRequestByAxisId::axis_id() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointStateRequestByAxisId.axis_id)
  return _internal_axis_id();
}
inline void JointStateRequestByAxisId::_internal_set_axis_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axis_id_ = value;
}
inline void JointStateRequestByAxisId::set_axis_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis_id(value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.JointStateRequestByAxisId.axis_id)
}

// -------------------------------------------------------------------

// GripperPositionGoal

// double position = 1;
inline void GripperPositionGoal::clear_position() {
  position_ = 0;
}
inline double GripperPositionGoal::_internal_position() const {
  return position_;
}
inline double GripperPositionGoal::position() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.GripperPositionGoal.position)
  return _internal_position();
}
inline void GripperPositionGoal::_internal_set_position(double value) {
  
  position_ = value;
}
inline void GripperPositionGoal::set_position(double value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.GripperPositionGoal.position)
}

// -------------------------------------------------------------------

// GripperStateRequest

// -------------------------------------------------------------------

// RobotParameterRequest

// -------------------------------------------------------------------

// Request

// .chessbot_simulator_control.Request.MessageType type = 1;
inline void Request::clear_type() {
  type_ = 0;
}
inline ::chessbot_simulator_control::Request_MessageType Request::_internal_type() const {
  return static_cast< ::chessbot_simulator_control::Request_MessageType >(type_);
}
inline ::chessbot_simulator_control::Request_MessageType Request::type() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.Request.type)
  return _internal_type();
}
inline void Request::_internal_set_type(::chessbot_simulator_control::Request_MessageType value) {
  
  type_ = value;
}
inline void Request::set_type(::chessbot_simulator_control::Request_MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.Request.type)
}

// .chessbot_simulator_control.JointPositionGoal set_joint_position = 2;
inline bool Request::_internal_has_set_joint_position() const {
  return this != internal_default_instance() && set_joint_position_ != nullptr;
}
inline bool Request::has_set_joint_position() const {
  return _internal_has_set_joint_position();
}
inline void Request::clear_set_joint_position() {
  if (GetArena() == nullptr && set_joint_position_ != nullptr) {
    delete set_joint_position_;
  }
  set_joint_position_ = nullptr;
}
inline const ::chessbot_simulator_control::JointPositionGoal& Request::_internal_set_joint_position() const {
  const ::chessbot_simulator_control::JointPositionGoal* p = set_joint_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chessbot_simulator_control::JointPositionGoal*>(
      &::chessbot_simulator_control::_JointPositionGoal_default_instance_);
}
inline const ::chessbot_simulator_control::JointPositionGoal& Request::set_joint_position() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.Request.set_joint_position)
  return _internal_set_joint_position();
}
inline void Request::unsafe_arena_set_allocated_set_joint_position(
    ::chessbot_simulator_control::JointPositionGoal* set_joint_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_joint_position_);
  }
  set_joint_position_ = set_joint_position;
  if (set_joint_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chessbot_simulator_control.Request.set_joint_position)
}
inline ::chessbot_simulator_control::JointPositionGoal* Request::release_set_joint_position() {
  auto temp = unsafe_arena_release_set_joint_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::chessbot_simulator_control::JointPositionGoal* Request::unsafe_arena_release_set_joint_position() {
  // @@protoc_insertion_point(field_release:chessbot_simulator_control.Request.set_joint_position)
  
  ::chessbot_simulator_control::JointPositionGoal* temp = set_joint_position_;
  set_joint_position_ = nullptr;
  return temp;
}
inline ::chessbot_simulator_control::JointPositionGoal* Request::_internal_mutable_set_joint_position() {
  
  if (set_joint_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::chessbot_simulator_control::JointPositionGoal>(GetArena());
    set_joint_position_ = p;
  }
  return set_joint_position_;
}
inline ::chessbot_simulator_control::JointPositionGoal* Request::mutable_set_joint_position() {
  // @@protoc_insertion_point(field_mutable:chessbot_simulator_control.Request.set_joint_position)
  return _internal_mutable_set_joint_position();
}
inline void Request::set_allocated_set_joint_position(::chessbot_simulator_control::JointPositionGoal* set_joint_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete set_joint_position_;
  }
  if (set_joint_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_joint_position);
    if (message_arena != submessage_arena) {
      set_joint_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_joint_position, submessage_arena);
    }
    
  } else {
    
  }
  set_joint_position_ = set_joint_position;
  // @@protoc_insertion_point(field_set_allocated:chessbot_simulator_control.Request.set_joint_position)
}

// .chessbot_simulator_control.JointVelocityGoal set_joint_velocity = 3;
inline bool Request::_internal_has_set_joint_velocity() const {
  return this != internal_default_instance() && set_joint_velocity_ != nullptr;
}
inline bool Request::has_set_joint_velocity() const {
  return _internal_has_set_joint_velocity();
}
inline void Request::clear_set_joint_velocity() {
  if (GetArena() == nullptr && set_joint_velocity_ != nullptr) {
    delete set_joint_velocity_;
  }
  set_joint_velocity_ = nullptr;
}
inline const ::chessbot_simulator_control::JointVelocityGoal& Request::_internal_set_joint_velocity() const {
  const ::chessbot_simulator_control::JointVelocityGoal* p = set_joint_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chessbot_simulator_control::JointVelocityGoal*>(
      &::chessbot_simulator_control::_JointVelocityGoal_default_instance_);
}
inline const ::chessbot_simulator_control::JointVelocityGoal& Request::set_joint_velocity() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.Request.set_joint_velocity)
  return _internal_set_joint_velocity();
}
inline void Request::unsafe_arena_set_allocated_set_joint_velocity(
    ::chessbot_simulator_control::JointVelocityGoal* set_joint_velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_joint_velocity_);
  }
  set_joint_velocity_ = set_joint_velocity;
  if (set_joint_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chessbot_simulator_control.Request.set_joint_velocity)
}
inline ::chessbot_simulator_control::JointVelocityGoal* Request::release_set_joint_velocity() {
  auto temp = unsafe_arena_release_set_joint_velocity();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::chessbot_simulator_control::JointVelocityGoal* Request::unsafe_arena_release_set_joint_velocity() {
  // @@protoc_insertion_point(field_release:chessbot_simulator_control.Request.set_joint_velocity)
  
  ::chessbot_simulator_control::JointVelocityGoal* temp = set_joint_velocity_;
  set_joint_velocity_ = nullptr;
  return temp;
}
inline ::chessbot_simulator_control::JointVelocityGoal* Request::_internal_mutable_set_joint_velocity() {
  
  if (set_joint_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::chessbot_simulator_control::JointVelocityGoal>(GetArena());
    set_joint_velocity_ = p;
  }
  return set_joint_velocity_;
}
inline ::chessbot_simulator_control::JointVelocityGoal* Request::mutable_set_joint_velocity() {
  // @@protoc_insertion_point(field_mutable:chessbot_simulator_control.Request.set_joint_velocity)
  return _internal_mutable_set_joint_velocity();
}
inline void Request::set_allocated_set_joint_velocity(::chessbot_simulator_control::JointVelocityGoal* set_joint_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete set_joint_velocity_;
  }
  if (set_joint_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_joint_velocity);
    if (message_arena != submessage_arena) {
      set_joint_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_joint_velocity, submessage_arena);
    }
    
  } else {
    
  }
  set_joint_velocity_ = set_joint_velocity;
  // @@protoc_insertion_point(field_set_allocated:chessbot_simulator_control.Request.set_joint_velocity)
}

// .chessbot_simulator_control.JointTorqueGoal set_joint_torque = 4;
inline bool Request::_internal_has_set_joint_torque() const {
  return this != internal_default_instance() && set_joint_torque_ != nullptr;
}
inline bool Request::has_set_joint_torque() const {
  return _internal_has_set_joint_torque();
}
inline void Request::clear_set_joint_torque() {
  if (GetArena() == nullptr && set_joint_torque_ != nullptr) {
    delete set_joint_torque_;
  }
  set_joint_torque_ = nullptr;
}
inline const ::chessbot_simulator_control::JointTorqueGoal& Request::_internal_set_joint_torque() const {
  const ::chessbot_simulator_control::JointTorqueGoal* p = set_joint_torque_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chessbot_simulator_control::JointTorqueGoal*>(
      &::chessbot_simulator_control::_JointTorqueGoal_default_instance_);
}
inline const ::chessbot_simulator_control::JointTorqueGoal& Request::set_joint_torque() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.Request.set_joint_torque)
  return _internal_set_joint_torque();
}
inline void Request::unsafe_arena_set_allocated_set_joint_torque(
    ::chessbot_simulator_control::JointTorqueGoal* set_joint_torque) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_joint_torque_);
  }
  set_joint_torque_ = set_joint_torque;
  if (set_joint_torque) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chessbot_simulator_control.Request.set_joint_torque)
}
inline ::chessbot_simulator_control::JointTorqueGoal* Request::release_set_joint_torque() {
  auto temp = unsafe_arena_release_set_joint_torque();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::chessbot_simulator_control::JointTorqueGoal* Request::unsafe_arena_release_set_joint_torque() {
  // @@protoc_insertion_point(field_release:chessbot_simulator_control.Request.set_joint_torque)
  
  ::chessbot_simulator_control::JointTorqueGoal* temp = set_joint_torque_;
  set_joint_torque_ = nullptr;
  return temp;
}
inline ::chessbot_simulator_control::JointTorqueGoal* Request::_internal_mutable_set_joint_torque() {
  
  if (set_joint_torque_ == nullptr) {
    auto* p = CreateMaybeMessage<::chessbot_simulator_control::JointTorqueGoal>(GetArena());
    set_joint_torque_ = p;
  }
  return set_joint_torque_;
}
inline ::chessbot_simulator_control::JointTorqueGoal* Request::mutable_set_joint_torque() {
  // @@protoc_insertion_point(field_mutable:chessbot_simulator_control.Request.set_joint_torque)
  return _internal_mutable_set_joint_torque();
}
inline void Request::set_allocated_set_joint_torque(::chessbot_simulator_control::JointTorqueGoal* set_joint_torque) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete set_joint_torque_;
  }
  if (set_joint_torque) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_joint_torque);
    if (message_arena != submessage_arena) {
      set_joint_torque = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_joint_torque, submessage_arena);
    }
    
  } else {
    
  }
  set_joint_torque_ = set_joint_torque;
  // @@protoc_insertion_point(field_set_allocated:chessbot_simulator_control.Request.set_joint_torque)
}

// .chessbot_simulator_control.JointPositionGoalByAxisId set_joint_position_by_axis_id = 5;
inline bool Request::_internal_has_set_joint_position_by_axis_id() const {
  return this != internal_default_instance() && set_joint_position_by_axis_id_ != nullptr;
}
inline bool Request::has_set_joint_position_by_axis_id() const {
  return _internal_has_set_joint_position_by_axis_id();
}
inline void Request::clear_set_joint_position_by_axis_id() {
  if (GetArena() == nullptr && set_joint_position_by_axis_id_ != nullptr) {
    delete set_joint_position_by_axis_id_;
  }
  set_joint_position_by_axis_id_ = nullptr;
}
inline const ::chessbot_simulator_control::JointPositionGoalByAxisId& Request::_internal_set_joint_position_by_axis_id() const {
  const ::chessbot_simulator_control::JointPositionGoalByAxisId* p = set_joint_position_by_axis_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chessbot_simulator_control::JointPositionGoalByAxisId*>(
      &::chessbot_simulator_control::_JointPositionGoalByAxisId_default_instance_);
}
inline const ::chessbot_simulator_control::JointPositionGoalByAxisId& Request::set_joint_position_by_axis_id() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.Request.set_joint_position_by_axis_id)
  return _internal_set_joint_position_by_axis_id();
}
inline void Request::unsafe_arena_set_allocated_set_joint_position_by_axis_id(
    ::chessbot_simulator_control::JointPositionGoalByAxisId* set_joint_position_by_axis_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_joint_position_by_axis_id_);
  }
  set_joint_position_by_axis_id_ = set_joint_position_by_axis_id;
  if (set_joint_position_by_axis_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chessbot_simulator_control.Request.set_joint_position_by_axis_id)
}
inline ::chessbot_simulator_control::JointPositionGoalByAxisId* Request::release_set_joint_position_by_axis_id() {
  auto temp = unsafe_arena_release_set_joint_position_by_axis_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::chessbot_simulator_control::JointPositionGoalByAxisId* Request::unsafe_arena_release_set_joint_position_by_axis_id() {
  // @@protoc_insertion_point(field_release:chessbot_simulator_control.Request.set_joint_position_by_axis_id)
  
  ::chessbot_simulator_control::JointPositionGoalByAxisId* temp = set_joint_position_by_axis_id_;
  set_joint_position_by_axis_id_ = nullptr;
  return temp;
}
inline ::chessbot_simulator_control::JointPositionGoalByAxisId* Request::_internal_mutable_set_joint_position_by_axis_id() {
  
  if (set_joint_position_by_axis_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::chessbot_simulator_control::JointPositionGoalByAxisId>(GetArena());
    set_joint_position_by_axis_id_ = p;
  }
  return set_joint_position_by_axis_id_;
}
inline ::chessbot_simulator_control::JointPositionGoalByAxisId* Request::mutable_set_joint_position_by_axis_id() {
  // @@protoc_insertion_point(field_mutable:chessbot_simulator_control.Request.set_joint_position_by_axis_id)
  return _internal_mutable_set_joint_position_by_axis_id();
}
inline void Request::set_allocated_set_joint_position_by_axis_id(::chessbot_simulator_control::JointPositionGoalByAxisId* set_joint_position_by_axis_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete set_joint_position_by_axis_id_;
  }
  if (set_joint_position_by_axis_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_joint_position_by_axis_id);
    if (message_arena != submessage_arena) {
      set_joint_position_by_axis_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_joint_position_by_axis_id, submessage_arena);
    }
    
  } else {
    
  }
  set_joint_position_by_axis_id_ = set_joint_position_by_axis_id;
  // @@protoc_insertion_point(field_set_allocated:chessbot_simulator_control.Request.set_joint_position_by_axis_id)
}

// .chessbot_simulator_control.JointVelocityGoalByAxisId set_joint_velocity_by_axis_id = 6;
inline bool Request::_internal_has_set_joint_velocity_by_axis_id() const {
  return this != internal_default_instance() && set_joint_velocity_by_axis_id_ != nullptr;
}
inline bool Request::has_set_joint_velocity_by_axis_id() const {
  return _internal_has_set_joint_velocity_by_axis_id();
}
inline void Request::clear_set_joint_velocity_by_axis_id() {
  if (GetArena() == nullptr && set_joint_velocity_by_axis_id_ != nullptr) {
    delete set_joint_velocity_by_axis_id_;
  }
  set_joint_velocity_by_axis_id_ = nullptr;
}
inline const ::chessbot_simulator_control::JointVelocityGoalByAxisId& Request::_internal_set_joint_velocity_by_axis_id() const {
  const ::chessbot_simulator_control::JointVelocityGoalByAxisId* p = set_joint_velocity_by_axis_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chessbot_simulator_control::JointVelocityGoalByAxisId*>(
      &::chessbot_simulator_control::_JointVelocityGoalByAxisId_default_instance_);
}
inline const ::chessbot_simulator_control::JointVelocityGoalByAxisId& Request::set_joint_velocity_by_axis_id() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.Request.set_joint_velocity_by_axis_id)
  return _internal_set_joint_velocity_by_axis_id();
}
inline void Request::unsafe_arena_set_allocated_set_joint_velocity_by_axis_id(
    ::chessbot_simulator_control::JointVelocityGoalByAxisId* set_joint_velocity_by_axis_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_joint_velocity_by_axis_id_);
  }
  set_joint_velocity_by_axis_id_ = set_joint_velocity_by_axis_id;
  if (set_joint_velocity_by_axis_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chessbot_simulator_control.Request.set_joint_velocity_by_axis_id)
}
inline ::chessbot_simulator_control::JointVelocityGoalByAxisId* Request::release_set_joint_velocity_by_axis_id() {
  auto temp = unsafe_arena_release_set_joint_velocity_by_axis_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::chessbot_simulator_control::JointVelocityGoalByAxisId* Request::unsafe_arena_release_set_joint_velocity_by_axis_id() {
  // @@protoc_insertion_point(field_release:chessbot_simulator_control.Request.set_joint_velocity_by_axis_id)
  
  ::chessbot_simulator_control::JointVelocityGoalByAxisId* temp = set_joint_velocity_by_axis_id_;
  set_joint_velocity_by_axis_id_ = nullptr;
  return temp;
}
inline ::chessbot_simulator_control::JointVelocityGoalByAxisId* Request::_internal_mutable_set_joint_velocity_by_axis_id() {
  
  if (set_joint_velocity_by_axis_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::chessbot_simulator_control::JointVelocityGoalByAxisId>(GetArena());
    set_joint_velocity_by_axis_id_ = p;
  }
  return set_joint_velocity_by_axis_id_;
}
inline ::chessbot_simulator_control::JointVelocityGoalByAxisId* Request::mutable_set_joint_velocity_by_axis_id() {
  // @@protoc_insertion_point(field_mutable:chessbot_simulator_control.Request.set_joint_velocity_by_axis_id)
  return _internal_mutable_set_joint_velocity_by_axis_id();
}
inline void Request::set_allocated_set_joint_velocity_by_axis_id(::chessbot_simulator_control::JointVelocityGoalByAxisId* set_joint_velocity_by_axis_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete set_joint_velocity_by_axis_id_;
  }
  if (set_joint_velocity_by_axis_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_joint_velocity_by_axis_id);
    if (message_arena != submessage_arena) {
      set_joint_velocity_by_axis_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_joint_velocity_by_axis_id, submessage_arena);
    }
    
  } else {
    
  }
  set_joint_velocity_by_axis_id_ = set_joint_velocity_by_axis_id;
  // @@protoc_insertion_point(field_set_allocated:chessbot_simulator_control.Request.set_joint_velocity_by_axis_id)
}

// .chessbot_simulator_control.JointTorqueGoalByAxisId set_joint_torque_by_axis_id = 7;
inline bool Request::_internal_has_set_joint_torque_by_axis_id() const {
  return this != internal_default_instance() && set_joint_torque_by_axis_id_ != nullptr;
}
inline bool Request::has_set_joint_torque_by_axis_id() const {
  return _internal_has_set_joint_torque_by_axis_id();
}
inline void Request::clear_set_joint_torque_by_axis_id() {
  if (GetArena() == nullptr && set_joint_torque_by_axis_id_ != nullptr) {
    delete set_joint_torque_by_axis_id_;
  }
  set_joint_torque_by_axis_id_ = nullptr;
}
inline const ::chessbot_simulator_control::JointTorqueGoalByAxisId& Request::_internal_set_joint_torque_by_axis_id() const {
  const ::chessbot_simulator_control::JointTorqueGoalByAxisId* p = set_joint_torque_by_axis_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chessbot_simulator_control::JointTorqueGoalByAxisId*>(
      &::chessbot_simulator_control::_JointTorqueGoalByAxisId_default_instance_);
}
inline const ::chessbot_simulator_control::JointTorqueGoalByAxisId& Request::set_joint_torque_by_axis_id() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.Request.set_joint_torque_by_axis_id)
  return _internal_set_joint_torque_by_axis_id();
}
inline void Request::unsafe_arena_set_allocated_set_joint_torque_by_axis_id(
    ::chessbot_simulator_control::JointTorqueGoalByAxisId* set_joint_torque_by_axis_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_joint_torque_by_axis_id_);
  }
  set_joint_torque_by_axis_id_ = set_joint_torque_by_axis_id;
  if (set_joint_torque_by_axis_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chessbot_simulator_control.Request.set_joint_torque_by_axis_id)
}
inline ::chessbot_simulator_control::JointTorqueGoalByAxisId* Request::release_set_joint_torque_by_axis_id() {
  auto temp = unsafe_arena_release_set_joint_torque_by_axis_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::chessbot_simulator_control::JointTorqueGoalByAxisId* Request::unsafe_arena_release_set_joint_torque_by_axis_id() {
  // @@protoc_insertion_point(field_release:chessbot_simulator_control.Request.set_joint_torque_by_axis_id)
  
  ::chessbot_simulator_control::JointTorqueGoalByAxisId* temp = set_joint_torque_by_axis_id_;
  set_joint_torque_by_axis_id_ = nullptr;
  return temp;
}
inline ::chessbot_simulator_control::JointTorqueGoalByAxisId* Request::_internal_mutable_set_joint_torque_by_axis_id() {
  
  if (set_joint_torque_by_axis_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::chessbot_simulator_control::JointTorqueGoalByAxisId>(GetArena());
    set_joint_torque_by_axis_id_ = p;
  }
  return set_joint_torque_by_axis_id_;
}
inline ::chessbot_simulator_control::JointTorqueGoalByAxisId* Request::mutable_set_joint_torque_by_axis_id() {
  // @@protoc_insertion_point(field_mutable:chessbot_simulator_control.Request.set_joint_torque_by_axis_id)
  return _internal_mutable_set_joint_torque_by_axis_id();
}
inline void Request::set_allocated_set_joint_torque_by_axis_id(::chessbot_simulator_control::JointTorqueGoalByAxisId* set_joint_torque_by_axis_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete set_joint_torque_by_axis_id_;
  }
  if (set_joint_torque_by_axis_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_joint_torque_by_axis_id);
    if (message_arena != submessage_arena) {
      set_joint_torque_by_axis_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_joint_torque_by_axis_id, submessage_arena);
    }
    
  } else {
    
  }
  set_joint_torque_by_axis_id_ = set_joint_torque_by_axis_id;
  // @@protoc_insertion_point(field_set_allocated:chessbot_simulator_control.Request.set_joint_torque_by_axis_id)
}

// .chessbot_simulator_control.JointStateRequest get_joint_state = 8;
inline bool Request::_internal_has_get_joint_state() const {
  return this != internal_default_instance() && get_joint_state_ != nullptr;
}
inline bool Request::has_get_joint_state() const {
  return _internal_has_get_joint_state();
}
inline void Request::clear_get_joint_state() {
  if (GetArena() == nullptr && get_joint_state_ != nullptr) {
    delete get_joint_state_;
  }
  get_joint_state_ = nullptr;
}
inline const ::chessbot_simulator_control::JointStateRequest& Request::_internal_get_joint_state() const {
  const ::chessbot_simulator_control::JointStateRequest* p = get_joint_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chessbot_simulator_control::JointStateRequest*>(
      &::chessbot_simulator_control::_JointStateRequest_default_instance_);
}
inline const ::chessbot_simulator_control::JointStateRequest& Request::get_joint_state() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.Request.get_joint_state)
  return _internal_get_joint_state();
}
inline void Request::unsafe_arena_set_allocated_get_joint_state(
    ::chessbot_simulator_control::JointStateRequest* get_joint_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_joint_state_);
  }
  get_joint_state_ = get_joint_state;
  if (get_joint_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chessbot_simulator_control.Request.get_joint_state)
}
inline ::chessbot_simulator_control::JointStateRequest* Request::release_get_joint_state() {
  auto temp = unsafe_arena_release_get_joint_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::chessbot_simulator_control::JointStateRequest* Request::unsafe_arena_release_get_joint_state() {
  // @@protoc_insertion_point(field_release:chessbot_simulator_control.Request.get_joint_state)
  
  ::chessbot_simulator_control::JointStateRequest* temp = get_joint_state_;
  get_joint_state_ = nullptr;
  return temp;
}
inline ::chessbot_simulator_control::JointStateRequest* Request::_internal_mutable_get_joint_state() {
  
  if (get_joint_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::chessbot_simulator_control::JointStateRequest>(GetArena());
    get_joint_state_ = p;
  }
  return get_joint_state_;
}
inline ::chessbot_simulator_control::JointStateRequest* Request::mutable_get_joint_state() {
  // @@protoc_insertion_point(field_mutable:chessbot_simulator_control.Request.get_joint_state)
  return _internal_mutable_get_joint_state();
}
inline void Request::set_allocated_get_joint_state(::chessbot_simulator_control::JointStateRequest* get_joint_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_joint_state_;
  }
  if (get_joint_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_joint_state);
    if (message_arena != submessage_arena) {
      get_joint_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_joint_state, submessage_arena);
    }
    
  } else {
    
  }
  get_joint_state_ = get_joint_state;
  // @@protoc_insertion_point(field_set_allocated:chessbot_simulator_control.Request.get_joint_state)
}

// .chessbot_simulator_control.JointStateRequestByAxisId get_joint_state_by_axis_id = 9;
inline bool Request::_internal_has_get_joint_state_by_axis_id() const {
  return this != internal_default_instance() && get_joint_state_by_axis_id_ != nullptr;
}
inline bool Request::has_get_joint_state_by_axis_id() const {
  return _internal_has_get_joint_state_by_axis_id();
}
inline void Request::clear_get_joint_state_by_axis_id() {
  if (GetArena() == nullptr && get_joint_state_by_axis_id_ != nullptr) {
    delete get_joint_state_by_axis_id_;
  }
  get_joint_state_by_axis_id_ = nullptr;
}
inline const ::chessbot_simulator_control::JointStateRequestByAxisId& Request::_internal_get_joint_state_by_axis_id() const {
  const ::chessbot_simulator_control::JointStateRequestByAxisId* p = get_joint_state_by_axis_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chessbot_simulator_control::JointStateRequestByAxisId*>(
      &::chessbot_simulator_control::_JointStateRequestByAxisId_default_instance_);
}
inline const ::chessbot_simulator_control::JointStateRequestByAxisId& Request::get_joint_state_by_axis_id() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.Request.get_joint_state_by_axis_id)
  return _internal_get_joint_state_by_axis_id();
}
inline void Request::unsafe_arena_set_allocated_get_joint_state_by_axis_id(
    ::chessbot_simulator_control::JointStateRequestByAxisId* get_joint_state_by_axis_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_joint_state_by_axis_id_);
  }
  get_joint_state_by_axis_id_ = get_joint_state_by_axis_id;
  if (get_joint_state_by_axis_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chessbot_simulator_control.Request.get_joint_state_by_axis_id)
}
inline ::chessbot_simulator_control::JointStateRequestByAxisId* Request::release_get_joint_state_by_axis_id() {
  auto temp = unsafe_arena_release_get_joint_state_by_axis_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::chessbot_simulator_control::JointStateRequestByAxisId* Request::unsafe_arena_release_get_joint_state_by_axis_id() {
  // @@protoc_insertion_point(field_release:chessbot_simulator_control.Request.get_joint_state_by_axis_id)
  
  ::chessbot_simulator_control::JointStateRequestByAxisId* temp = get_joint_state_by_axis_id_;
  get_joint_state_by_axis_id_ = nullptr;
  return temp;
}
inline ::chessbot_simulator_control::JointStateRequestByAxisId* Request::_internal_mutable_get_joint_state_by_axis_id() {
  
  if (get_joint_state_by_axis_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::chessbot_simulator_control::JointStateRequestByAxisId>(GetArena());
    get_joint_state_by_axis_id_ = p;
  }
  return get_joint_state_by_axis_id_;
}
inline ::chessbot_simulator_control::JointStateRequestByAxisId* Request::mutable_get_joint_state_by_axis_id() {
  // @@protoc_insertion_point(field_mutable:chessbot_simulator_control.Request.get_joint_state_by_axis_id)
  return _internal_mutable_get_joint_state_by_axis_id();
}
inline void Request::set_allocated_get_joint_state_by_axis_id(::chessbot_simulator_control::JointStateRequestByAxisId* get_joint_state_by_axis_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_joint_state_by_axis_id_;
  }
  if (get_joint_state_by_axis_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_joint_state_by_axis_id);
    if (message_arena != submessage_arena) {
      get_joint_state_by_axis_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_joint_state_by_axis_id, submessage_arena);
    }
    
  } else {
    
  }
  get_joint_state_by_axis_id_ = get_joint_state_by_axis_id;
  // @@protoc_insertion_point(field_set_allocated:chessbot_simulator_control.Request.get_joint_state_by_axis_id)
}

// .chessbot_simulator_control.GripperPositionGoal set_gripper_position = 10;
inline bool Request::_internal_has_set_gripper_position() const {
  return this != internal_default_instance() && set_gripper_position_ != nullptr;
}
inline bool Request::has_set_gripper_position() const {
  return _internal_has_set_gripper_position();
}
inline void Request::clear_set_gripper_position() {
  if (GetArena() == nullptr && set_gripper_position_ != nullptr) {
    delete set_gripper_position_;
  }
  set_gripper_position_ = nullptr;
}
inline const ::chessbot_simulator_control::GripperPositionGoal& Request::_internal_set_gripper_position() const {
  const ::chessbot_simulator_control::GripperPositionGoal* p = set_gripper_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chessbot_simulator_control::GripperPositionGoal*>(
      &::chessbot_simulator_control::_GripperPositionGoal_default_instance_);
}
inline const ::chessbot_simulator_control::GripperPositionGoal& Request::set_gripper_position() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.Request.set_gripper_position)
  return _internal_set_gripper_position();
}
inline void Request::unsafe_arena_set_allocated_set_gripper_position(
    ::chessbot_simulator_control::GripperPositionGoal* set_gripper_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_gripper_position_);
  }
  set_gripper_position_ = set_gripper_position;
  if (set_gripper_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chessbot_simulator_control.Request.set_gripper_position)
}
inline ::chessbot_simulator_control::GripperPositionGoal* Request::release_set_gripper_position() {
  auto temp = unsafe_arena_release_set_gripper_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::chessbot_simulator_control::GripperPositionGoal* Request::unsafe_arena_release_set_gripper_position() {
  // @@protoc_insertion_point(field_release:chessbot_simulator_control.Request.set_gripper_position)
  
  ::chessbot_simulator_control::GripperPositionGoal* temp = set_gripper_position_;
  set_gripper_position_ = nullptr;
  return temp;
}
inline ::chessbot_simulator_control::GripperPositionGoal* Request::_internal_mutable_set_gripper_position() {
  
  if (set_gripper_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::chessbot_simulator_control::GripperPositionGoal>(GetArena());
    set_gripper_position_ = p;
  }
  return set_gripper_position_;
}
inline ::chessbot_simulator_control::GripperPositionGoal* Request::mutable_set_gripper_position() {
  // @@protoc_insertion_point(field_mutable:chessbot_simulator_control.Request.set_gripper_position)
  return _internal_mutable_set_gripper_position();
}
inline void Request::set_allocated_set_gripper_position(::chessbot_simulator_control::GripperPositionGoal* set_gripper_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete set_gripper_position_;
  }
  if (set_gripper_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_gripper_position);
    if (message_arena != submessage_arena) {
      set_gripper_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_gripper_position, submessage_arena);
    }
    
  } else {
    
  }
  set_gripper_position_ = set_gripper_position;
  // @@protoc_insertion_point(field_set_allocated:chessbot_simulator_control.Request.set_gripper_position)
}

// .chessbot_simulator_control.GripperStateRequest get_gripper_state = 11;
inline bool Request::_internal_has_get_gripper_state() const {
  return this != internal_default_instance() && get_gripper_state_ != nullptr;
}
inline bool Request::has_get_gripper_state() const {
  return _internal_has_get_gripper_state();
}
inline void Request::clear_get_gripper_state() {
  if (GetArena() == nullptr && get_gripper_state_ != nullptr) {
    delete get_gripper_state_;
  }
  get_gripper_state_ = nullptr;
}
inline const ::chessbot_simulator_control::GripperStateRequest& Request::_internal_get_gripper_state() const {
  const ::chessbot_simulator_control::GripperStateRequest* p = get_gripper_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chessbot_simulator_control::GripperStateRequest*>(
      &::chessbot_simulator_control::_GripperStateRequest_default_instance_);
}
inline const ::chessbot_simulator_control::GripperStateRequest& Request::get_gripper_state() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.Request.get_gripper_state)
  return _internal_get_gripper_state();
}
inline void Request::unsafe_arena_set_allocated_get_gripper_state(
    ::chessbot_simulator_control::GripperStateRequest* get_gripper_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_gripper_state_);
  }
  get_gripper_state_ = get_gripper_state;
  if (get_gripper_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chessbot_simulator_control.Request.get_gripper_state)
}
inline ::chessbot_simulator_control::GripperStateRequest* Request::release_get_gripper_state() {
  auto temp = unsafe_arena_release_get_gripper_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::chessbot_simulator_control::GripperStateRequest* Request::unsafe_arena_release_get_gripper_state() {
  // @@protoc_insertion_point(field_release:chessbot_simulator_control.Request.get_gripper_state)
  
  ::chessbot_simulator_control::GripperStateRequest* temp = get_gripper_state_;
  get_gripper_state_ = nullptr;
  return temp;
}
inline ::chessbot_simulator_control::GripperStateRequest* Request::_internal_mutable_get_gripper_state() {
  
  if (get_gripper_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::chessbot_simulator_control::GripperStateRequest>(GetArena());
    get_gripper_state_ = p;
  }
  return get_gripper_state_;
}
inline ::chessbot_simulator_control::GripperStateRequest* Request::mutable_get_gripper_state() {
  // @@protoc_insertion_point(field_mutable:chessbot_simulator_control.Request.get_gripper_state)
  return _internal_mutable_get_gripper_state();
}
inline void Request::set_allocated_get_gripper_state(::chessbot_simulator_control::GripperStateRequest* get_gripper_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_gripper_state_;
  }
  if (get_gripper_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_gripper_state);
    if (message_arena != submessage_arena) {
      get_gripper_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_gripper_state, submessage_arena);
    }
    
  } else {
    
  }
  get_gripper_state_ = get_gripper_state;
  // @@protoc_insertion_point(field_set_allocated:chessbot_simulator_control.Request.get_gripper_state)
}

// .chessbot_simulator_control.RobotParameterRequest robot_parameter_get = 12;
inline bool Request::_internal_has_robot_parameter_get() const {
  return this != internal_default_instance() && robot_parameter_get_ != nullptr;
}
inline bool Request::has_robot_parameter_get() const {
  return _internal_has_robot_parameter_get();
}
inline void Request::clear_robot_parameter_get() {
  if (GetArena() == nullptr && robot_parameter_get_ != nullptr) {
    delete robot_parameter_get_;
  }
  robot_parameter_get_ = nullptr;
}
inline const ::chessbot_simulator_control::RobotParameterRequest& Request::_internal_robot_parameter_get() const {
  const ::chessbot_simulator_control::RobotParameterRequest* p = robot_parameter_get_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chessbot_simulator_control::RobotParameterRequest*>(
      &::chessbot_simulator_control::_RobotParameterRequest_default_instance_);
}
inline const ::chessbot_simulator_control::RobotParameterRequest& Request::robot_parameter_get() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.Request.robot_parameter_get)
  return _internal_robot_parameter_get();
}
inline void Request::unsafe_arena_set_allocated_robot_parameter_get(
    ::chessbot_simulator_control::RobotParameterRequest* robot_parameter_get) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(robot_parameter_get_);
  }
  robot_parameter_get_ = robot_parameter_get;
  if (robot_parameter_get) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chessbot_simulator_control.Request.robot_parameter_get)
}
inline ::chessbot_simulator_control::RobotParameterRequest* Request::release_robot_parameter_get() {
  auto temp = unsafe_arena_release_robot_parameter_get();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::chessbot_simulator_control::RobotParameterRequest* Request::unsafe_arena_release_robot_parameter_get() {
  // @@protoc_insertion_point(field_release:chessbot_simulator_control.Request.robot_parameter_get)
  
  ::chessbot_simulator_control::RobotParameterRequest* temp = robot_parameter_get_;
  robot_parameter_get_ = nullptr;
  return temp;
}
inline ::chessbot_simulator_control::RobotParameterRequest* Request::_internal_mutable_robot_parameter_get() {
  
  if (robot_parameter_get_ == nullptr) {
    auto* p = CreateMaybeMessage<::chessbot_simulator_control::RobotParameterRequest>(GetArena());
    robot_parameter_get_ = p;
  }
  return robot_parameter_get_;
}
inline ::chessbot_simulator_control::RobotParameterRequest* Request::mutable_robot_parameter_get() {
  // @@protoc_insertion_point(field_mutable:chessbot_simulator_control.Request.robot_parameter_get)
  return _internal_mutable_robot_parameter_get();
}
inline void Request::set_allocated_robot_parameter_get(::chessbot_simulator_control::RobotParameterRequest* robot_parameter_get) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete robot_parameter_get_;
  }
  if (robot_parameter_get) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(robot_parameter_get);
    if (message_arena != submessage_arena) {
      robot_parameter_get = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, robot_parameter_get, submessage_arena);
    }
    
  } else {
    
  }
  robot_parameter_get_ = robot_parameter_get;
  // @@protoc_insertion_point(field_set_allocated:chessbot_simulator_control.Request.robot_parameter_get)
}

// -------------------------------------------------------------------

// JointPositionLimit

// double upper_limit = 1;
inline void JointPositionLimit::clear_upper_limit() {
  upper_limit_ = 0;
}
inline double JointPositionLimit::_internal_upper_limit() const {
  return upper_limit_;
}
inline double JointPositionLimit::upper_limit() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointPositionLimit.upper_limit)
  return _internal_upper_limit();
}
inline void JointPositionLimit::_internal_set_upper_limit(double value) {
  
  upper_limit_ = value;
}
inline void JointPositionLimit::set_upper_limit(double value) {
  _internal_set_upper_limit(value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.JointPositionLimit.upper_limit)
}

// double lower_limit = 2;
inline void JointPositionLimit::clear_lower_limit() {
  lower_limit_ = 0;
}
inline double JointPositionLimit::_internal_lower_limit() const {
  return lower_limit_;
}
inline double JointPositionLimit::lower_limit() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointPositionLimit.lower_limit)
  return _internal_lower_limit();
}
inline void JointPositionLimit::_internal_set_lower_limit(double value) {
  
  lower_limit_ = value;
}
inline void JointPositionLimit::set_lower_limit(double value) {
  _internal_set_lower_limit(value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.JointPositionLimit.lower_limit)
}

// -------------------------------------------------------------------

// JointVelocityLimit

// double upper_limit = 1;
inline void JointVelocityLimit::clear_upper_limit() {
  upper_limit_ = 0;
}
inline double JointVelocityLimit::_internal_upper_limit() const {
  return upper_limit_;
}
inline double JointVelocityLimit::upper_limit() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointVelocityLimit.upper_limit)
  return _internal_upper_limit();
}
inline void JointVelocityLimit::_internal_set_upper_limit(double value) {
  
  upper_limit_ = value;
}
inline void JointVelocityLimit::set_upper_limit(double value) {
  _internal_set_upper_limit(value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.JointVelocityLimit.upper_limit)
}

// double lower_limit = 2;
inline void JointVelocityLimit::clear_lower_limit() {
  lower_limit_ = 0;
}
inline double JointVelocityLimit::_internal_lower_limit() const {
  return lower_limit_;
}
inline double JointVelocityLimit::lower_limit() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointVelocityLimit.lower_limit)
  return _internal_lower_limit();
}
inline void JointVelocityLimit::_internal_set_lower_limit(double value) {
  
  lower_limit_ = value;
}
inline void JointVelocityLimit::set_lower_limit(double value) {
  _internal_set_lower_limit(value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.JointVelocityLimit.lower_limit)
}

// -------------------------------------------------------------------

// JointEffortLimit

// double upper_limit = 1;
inline void JointEffortLimit::clear_upper_limit() {
  upper_limit_ = 0;
}
inline double JointEffortLimit::_internal_upper_limit() const {
  return upper_limit_;
}
inline double JointEffortLimit::upper_limit() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointEffortLimit.upper_limit)
  return _internal_upper_limit();
}
inline void JointEffortLimit::_internal_set_upper_limit(double value) {
  
  upper_limit_ = value;
}
inline void JointEffortLimit::set_upper_limit(double value) {
  _internal_set_upper_limit(value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.JointEffortLimit.upper_limit)
}

// double lower_limit = 2;
inline void JointEffortLimit::clear_lower_limit() {
  lower_limit_ = 0;
}
inline double JointEffortLimit::_internal_lower_limit() const {
  return lower_limit_;
}
inline double JointEffortLimit::lower_limit() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointEffortLimit.lower_limit)
  return _internal_lower_limit();
}
inline void JointEffortLimit::_internal_set_lower_limit(double value) {
  
  lower_limit_ = value;
}
inline void JointEffortLimit::set_lower_limit(double value) {
  _internal_set_lower_limit(value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.JointEffortLimit.lower_limit)
}

// -------------------------------------------------------------------

// JointLimit

// .chessbot_simulator_control.JointLimit.JointType type = 1;
inline void JointLimit::clear_type() {
  type_ = 0;
}
inline ::chessbot_simulator_control::JointLimit_JointType JointLimit::_internal_type() const {
  return static_cast< ::chessbot_simulator_control::JointLimit_JointType >(type_);
}
inline ::chessbot_simulator_control::JointLimit_JointType JointLimit::type() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointLimit.type)
  return _internal_type();
}
inline void JointLimit::_internal_set_type(::chessbot_simulator_control::JointLimit_JointType value) {
  
  type_ = value;
}
inline void JointLimit::set_type(::chessbot_simulator_control::JointLimit_JointType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.JointLimit.type)
}

// .chessbot_simulator_control.JointPositionLimit position_limit = 2;
inline bool JointLimit::_internal_has_position_limit() const {
  return this != internal_default_instance() && position_limit_ != nullptr;
}
inline bool JointLimit::has_position_limit() const {
  return _internal_has_position_limit();
}
inline void JointLimit::clear_position_limit() {
  if (GetArena() == nullptr && position_limit_ != nullptr) {
    delete position_limit_;
  }
  position_limit_ = nullptr;
}
inline const ::chessbot_simulator_control::JointPositionLimit& JointLimit::_internal_position_limit() const {
  const ::chessbot_simulator_control::JointPositionLimit* p = position_limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chessbot_simulator_control::JointPositionLimit*>(
      &::chessbot_simulator_control::_JointPositionLimit_default_instance_);
}
inline const ::chessbot_simulator_control::JointPositionLimit& JointLimit::position_limit() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointLimit.position_limit)
  return _internal_position_limit();
}
inline void JointLimit::unsafe_arena_set_allocated_position_limit(
    ::chessbot_simulator_control::JointPositionLimit* position_limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_limit_);
  }
  position_limit_ = position_limit;
  if (position_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chessbot_simulator_control.JointLimit.position_limit)
}
inline ::chessbot_simulator_control::JointPositionLimit* JointLimit::release_position_limit() {
  auto temp = unsafe_arena_release_position_limit();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::chessbot_simulator_control::JointPositionLimit* JointLimit::unsafe_arena_release_position_limit() {
  // @@protoc_insertion_point(field_release:chessbot_simulator_control.JointLimit.position_limit)
  
  ::chessbot_simulator_control::JointPositionLimit* temp = position_limit_;
  position_limit_ = nullptr;
  return temp;
}
inline ::chessbot_simulator_control::JointPositionLimit* JointLimit::_internal_mutable_position_limit() {
  
  if (position_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::chessbot_simulator_control::JointPositionLimit>(GetArena());
    position_limit_ = p;
  }
  return position_limit_;
}
inline ::chessbot_simulator_control::JointPositionLimit* JointLimit::mutable_position_limit() {
  // @@protoc_insertion_point(field_mutable:chessbot_simulator_control.JointLimit.position_limit)
  return _internal_mutable_position_limit();
}
inline void JointLimit::set_allocated_position_limit(::chessbot_simulator_control::JointPositionLimit* position_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_limit_;
  }
  if (position_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position_limit);
    if (message_arena != submessage_arena) {
      position_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_limit, submessage_arena);
    }
    
  } else {
    
  }
  position_limit_ = position_limit;
  // @@protoc_insertion_point(field_set_allocated:chessbot_simulator_control.JointLimit.position_limit)
}

// .chessbot_simulator_control.JointVelocityLimit velocity_limit = 3;
inline bool JointLimit::_internal_has_velocity_limit() const {
  return this != internal_default_instance() && velocity_limit_ != nullptr;
}
inline bool JointLimit::has_velocity_limit() const {
  return _internal_has_velocity_limit();
}
inline void JointLimit::clear_velocity_limit() {
  if (GetArena() == nullptr && velocity_limit_ != nullptr) {
    delete velocity_limit_;
  }
  velocity_limit_ = nullptr;
}
inline const ::chessbot_simulator_control::JointVelocityLimit& JointLimit::_internal_velocity_limit() const {
  const ::chessbot_simulator_control::JointVelocityLimit* p = velocity_limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chessbot_simulator_control::JointVelocityLimit*>(
      &::chessbot_simulator_control::_JointVelocityLimit_default_instance_);
}
inline const ::chessbot_simulator_control::JointVelocityLimit& JointLimit::velocity_limit() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointLimit.velocity_limit)
  return _internal_velocity_limit();
}
inline void JointLimit::unsafe_arena_set_allocated_velocity_limit(
    ::chessbot_simulator_control::JointVelocityLimit* velocity_limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_limit_);
  }
  velocity_limit_ = velocity_limit;
  if (velocity_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chessbot_simulator_control.JointLimit.velocity_limit)
}
inline ::chessbot_simulator_control::JointVelocityLimit* JointLimit::release_velocity_limit() {
  auto temp = unsafe_arena_release_velocity_limit();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::chessbot_simulator_control::JointVelocityLimit* JointLimit::unsafe_arena_release_velocity_limit() {
  // @@protoc_insertion_point(field_release:chessbot_simulator_control.JointLimit.velocity_limit)
  
  ::chessbot_simulator_control::JointVelocityLimit* temp = velocity_limit_;
  velocity_limit_ = nullptr;
  return temp;
}
inline ::chessbot_simulator_control::JointVelocityLimit* JointLimit::_internal_mutable_velocity_limit() {
  
  if (velocity_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::chessbot_simulator_control::JointVelocityLimit>(GetArena());
    velocity_limit_ = p;
  }
  return velocity_limit_;
}
inline ::chessbot_simulator_control::JointVelocityLimit* JointLimit::mutable_velocity_limit() {
  // @@protoc_insertion_point(field_mutable:chessbot_simulator_control.JointLimit.velocity_limit)
  return _internal_mutable_velocity_limit();
}
inline void JointLimit::set_allocated_velocity_limit(::chessbot_simulator_control::JointVelocityLimit* velocity_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete velocity_limit_;
  }
  if (velocity_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(velocity_limit);
    if (message_arena != submessage_arena) {
      velocity_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_limit, submessage_arena);
    }
    
  } else {
    
  }
  velocity_limit_ = velocity_limit;
  // @@protoc_insertion_point(field_set_allocated:chessbot_simulator_control.JointLimit.velocity_limit)
}

// .chessbot_simulator_control.JointEffortLimit effort_limit = 4;
inline bool JointLimit::_internal_has_effort_limit() const {
  return this != internal_default_instance() && effort_limit_ != nullptr;
}
inline bool JointLimit::has_effort_limit() const {
  return _internal_has_effort_limit();
}
inline void JointLimit::clear_effort_limit() {
  if (GetArena() == nullptr && effort_limit_ != nullptr) {
    delete effort_limit_;
  }
  effort_limit_ = nullptr;
}
inline const ::chessbot_simulator_control::JointEffortLimit& JointLimit::_internal_effort_limit() const {
  const ::chessbot_simulator_control::JointEffortLimit* p = effort_limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chessbot_simulator_control::JointEffortLimit*>(
      &::chessbot_simulator_control::_JointEffortLimit_default_instance_);
}
inline const ::chessbot_simulator_control::JointEffortLimit& JointLimit::effort_limit() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointLimit.effort_limit)
  return _internal_effort_limit();
}
inline void JointLimit::unsafe_arena_set_allocated_effort_limit(
    ::chessbot_simulator_control::JointEffortLimit* effort_limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(effort_limit_);
  }
  effort_limit_ = effort_limit;
  if (effort_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chessbot_simulator_control.JointLimit.effort_limit)
}
inline ::chessbot_simulator_control::JointEffortLimit* JointLimit::release_effort_limit() {
  auto temp = unsafe_arena_release_effort_limit();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::chessbot_simulator_control::JointEffortLimit* JointLimit::unsafe_arena_release_effort_limit() {
  // @@protoc_insertion_point(field_release:chessbot_simulator_control.JointLimit.effort_limit)
  
  ::chessbot_simulator_control::JointEffortLimit* temp = effort_limit_;
  effort_limit_ = nullptr;
  return temp;
}
inline ::chessbot_simulator_control::JointEffortLimit* JointLimit::_internal_mutable_effort_limit() {
  
  if (effort_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::chessbot_simulator_control::JointEffortLimit>(GetArena());
    effort_limit_ = p;
  }
  return effort_limit_;
}
inline ::chessbot_simulator_control::JointEffortLimit* JointLimit::mutable_effort_limit() {
  // @@protoc_insertion_point(field_mutable:chessbot_simulator_control.JointLimit.effort_limit)
  return _internal_mutable_effort_limit();
}
inline void JointLimit::set_allocated_effort_limit(::chessbot_simulator_control::JointEffortLimit* effort_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete effort_limit_;
  }
  if (effort_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(effort_limit);
    if (message_arena != submessage_arena) {
      effort_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, effort_limit, submessage_arena);
    }
    
  } else {
    
  }
  effort_limit_ = effort_limit;
  // @@protoc_insertion_point(field_set_allocated:chessbot_simulator_control.JointLimit.effort_limit)
}

// -------------------------------------------------------------------

// RobotParameter

// int32 axes_number = 1;
inline void RobotParameter::clear_axes_number() {
  axes_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RobotParameter::_internal_axes_number() const {
  return axes_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RobotParameter::axes_number() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.RobotParameter.axes_number)
  return _internal_axes_number();
}
inline void RobotParameter::_internal_set_axes_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axes_number_ = value;
}
inline void RobotParameter::set_axes_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axes_number(value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.RobotParameter.axes_number)
}

// repeated .chessbot_simulator_control.JointLimit joint_limit = 2;
inline int RobotParameter::_internal_joint_limit_size() const {
  return joint_limit_.size();
}
inline int RobotParameter::joint_limit_size() const {
  return _internal_joint_limit_size();
}
inline void RobotParameter::clear_joint_limit() {
  joint_limit_.Clear();
}
inline ::chessbot_simulator_control::JointLimit* RobotParameter::mutable_joint_limit(int index) {
  // @@protoc_insertion_point(field_mutable:chessbot_simulator_control.RobotParameter.joint_limit)
  return joint_limit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chessbot_simulator_control::JointLimit >*
RobotParameter::mutable_joint_limit() {
  // @@protoc_insertion_point(field_mutable_list:chessbot_simulator_control.RobotParameter.joint_limit)
  return &joint_limit_;
}
inline const ::chessbot_simulator_control::JointLimit& RobotParameter::_internal_joint_limit(int index) const {
  return joint_limit_.Get(index);
}
inline const ::chessbot_simulator_control::JointLimit& RobotParameter::joint_limit(int index) const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.RobotParameter.joint_limit)
  return _internal_joint_limit(index);
}
inline ::chessbot_simulator_control::JointLimit* RobotParameter::_internal_add_joint_limit() {
  return joint_limit_.Add();
}
inline ::chessbot_simulator_control::JointLimit* RobotParameter::add_joint_limit() {
  // @@protoc_insertion_point(field_add:chessbot_simulator_control.RobotParameter.joint_limit)
  return _internal_add_joint_limit();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chessbot_simulator_control::JointLimit >&
RobotParameter::joint_limit() const {
  // @@protoc_insertion_point(field_list:chessbot_simulator_control.RobotParameter.joint_limit)
  return joint_limit_;
}

// -------------------------------------------------------------------

// JointState

// int32 axis_id = 1;
inline void JointState::clear_axis_id() {
  axis_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JointState::_internal_axis_id() const {
  return axis_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JointState::axis_id() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointState.axis_id)
  return _internal_axis_id();
}
inline void JointState::_internal_set_axis_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axis_id_ = value;
}
inline void JointState::set_axis_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis_id(value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.JointState.axis_id)
}

// double position = 2;
inline void JointState::clear_position() {
  position_ = 0;
}
inline double JointState::_internal_position() const {
  return position_;
}
inline double JointState::position() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointState.position)
  return _internal_position();
}
inline void JointState::_internal_set_position(double value) {
  
  position_ = value;
}
inline void JointState::set_position(double value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.JointState.position)
}

// double velocity = 3;
inline void JointState::clear_velocity() {
  velocity_ = 0;
}
inline double JointState::_internal_velocity() const {
  return velocity_;
}
inline double JointState::velocity() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointState.velocity)
  return _internal_velocity();
}
inline void JointState::_internal_set_velocity(double value) {
  
  velocity_ = value;
}
inline void JointState::set_velocity(double value) {
  _internal_set_velocity(value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.JointState.velocity)
}

// double torque = 4;
inline void JointState::clear_torque() {
  torque_ = 0;
}
inline double JointState::_internal_torque() const {
  return torque_;
}
inline double JointState::torque() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointState.torque)
  return _internal_torque();
}
inline void JointState::_internal_set_torque(double value) {
  
  torque_ = value;
}
inline void JointState::set_torque(double value) {
  _internal_set_torque(value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.JointState.torque)
}

// -------------------------------------------------------------------

// JointStates

// repeated .chessbot_simulator_control.JointState states = 1;
inline int JointStates::_internal_states_size() const {
  return states_.size();
}
inline int JointStates::states_size() const {
  return _internal_states_size();
}
inline void JointStates::clear_states() {
  states_.Clear();
}
inline ::chessbot_simulator_control::JointState* JointStates::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:chessbot_simulator_control.JointStates.states)
  return states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chessbot_simulator_control::JointState >*
JointStates::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:chessbot_simulator_control.JointStates.states)
  return &states_;
}
inline const ::chessbot_simulator_control::JointState& JointStates::_internal_states(int index) const {
  return states_.Get(index);
}
inline const ::chessbot_simulator_control::JointState& JointStates::states(int index) const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.JointStates.states)
  return _internal_states(index);
}
inline ::chessbot_simulator_control::JointState* JointStates::_internal_add_states() {
  return states_.Add();
}
inline ::chessbot_simulator_control::JointState* JointStates::add_states() {
  // @@protoc_insertion_point(field_add:chessbot_simulator_control.JointStates.states)
  return _internal_add_states();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chessbot_simulator_control::JointState >&
JointStates::states() const {
  // @@protoc_insertion_point(field_list:chessbot_simulator_control.JointStates.states)
  return states_;
}

// -------------------------------------------------------------------

// GripperState

// double position = 1;
inline void GripperState::clear_position() {
  position_ = 0;
}
inline double GripperState::_internal_position() const {
  return position_;
}
inline double GripperState::position() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.GripperState.position)
  return _internal_position();
}
inline void GripperState::_internal_set_position(double value) {
  
  position_ = value;
}
inline void GripperState::set_position(double value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.GripperState.position)
}

// -------------------------------------------------------------------

// Acknowledge

// string acknowledge = 1;
inline void Acknowledge::clear_acknowledge() {
  acknowledge_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Acknowledge::acknowledge() const {
  // @@protoc_insertion_point(field_get:chessbot_simulator_control.Acknowledge.acknowledge)
  return _internal_acknowledge();
}
inline void Acknowledge::set_acknowledge(const std::string& value) {
  _internal_set_acknowledge(value);
  // @@protoc_insertion_point(field_set:chessbot_simulator_control.Acknowledge.acknowledge)
}
inline std::string* Acknowledge::mutable_acknowledge() {
  // @@protoc_insertion_point(field_mutable:chessbot_simulator_control.Acknowledge.acknowledge)
  return _internal_mutable_acknowledge();
}
inline const std::string& Acknowledge::_internal_acknowledge() const {
  return acknowledge_.Get();
}
inline void Acknowledge::_internal_set_acknowledge(const std::string& value) {
  
  acknowledge_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Acknowledge::set_acknowledge(std::string&& value) {
  
  acknowledge_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chessbot_simulator_control.Acknowledge.acknowledge)
}
inline void Acknowledge::set_acknowledge(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  acknowledge_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chessbot_simulator_control.Acknowledge.acknowledge)
}
inline void Acknowledge::set_acknowledge(const char* value,
    size_t size) {
  
  acknowledge_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chessbot_simulator_control.Acknowledge.acknowledge)
}
inline std::string* Acknowledge::_internal_mutable_acknowledge() {
  
  return acknowledge_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Acknowledge::release_acknowledge() {
  // @@protoc_insertion_point(field_release:chessbot_simulator_control.Acknowledge.acknowledge)
  return acknowledge_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Acknowledge::set_allocated_acknowledge(std::string* acknowledge) {
  if (acknowledge != nullptr) {
    
  } else {
    
  }
  acknowledge_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), acknowledge,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chessbot_simulator_control.Acknowledge.acknowledge)
}
inline std::string* Acknowledge::unsafe_arena_release_acknowledge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chessbot_simulator_control.Acknowledge.acknowledge)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return acknowledge_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Acknowledge::unsafe_arena_set_allocated_acknowledge(
    std::string* acknowledge) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (acknowledge != nullptr) {
    
  } else {
    
  }
  acknowledge_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      acknowledge, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chessbot_simulator_control.Acknowledge.acknowledge)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chessbot_simulator_control

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::chessbot_simulator_control::Request_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chessbot_simulator_control::Request_MessageType>() {
  return ::chessbot_simulator_control::Request_MessageType_descriptor();
}
template <> struct is_proto_enum< ::chessbot_simulator_control::JointLimit_JointType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chessbot_simulator_control::JointLimit_JointType>() {
  return ::chessbot_simulator_control::JointLimit_JointType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_simulator_5fcontrol_2eproto
