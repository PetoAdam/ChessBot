// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simulator_control.proto

#include "include/chessbot/simulator_control.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_simulator_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GripperPositionGoal_simulator_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_simulator_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GripperStateRequest_simulator_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_simulator_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointEffortLimit_simulator_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_simulator_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_JointLimit_simulator_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_simulator_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointPositionGoal_simulator_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_simulator_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointPositionGoalByAxisId_simulator_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_simulator_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointPositionLimit_simulator_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_simulator_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointState_simulator_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_simulator_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointStateRequest_simulator_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_simulator_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointStateRequestByAxisId_simulator_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_simulator_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointTorqueGoal_simulator_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_simulator_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointTorqueGoalByAxisId_simulator_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_simulator_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointVelocityGoal_simulator_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_simulator_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointVelocityGoalByAxisId_simulator_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_simulator_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointVelocityLimit_simulator_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_simulator_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RobotParameterRequest_simulator_5fcontrol_2eproto;
namespace chessbot_simulator_control {
class JointPositionGoalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JointPositionGoal> _instance;
} _JointPositionGoal_default_instance_;
class JointVelocityGoalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JointVelocityGoal> _instance;
} _JointVelocityGoal_default_instance_;
class JointTorqueGoalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JointTorqueGoal> _instance;
} _JointTorqueGoal_default_instance_;
class JointPositionGoalByAxisIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JointPositionGoalByAxisId> _instance;
} _JointPositionGoalByAxisId_default_instance_;
class JointVelocityGoalByAxisIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JointVelocityGoalByAxisId> _instance;
} _JointVelocityGoalByAxisId_default_instance_;
class JointTorqueGoalByAxisIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JointTorqueGoalByAxisId> _instance;
} _JointTorqueGoalByAxisId_default_instance_;
class JointStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JointStateRequest> _instance;
} _JointStateRequest_default_instance_;
class JointStateRequestByAxisIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JointStateRequestByAxisId> _instance;
} _JointStateRequestByAxisId_default_instance_;
class GripperPositionGoalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GripperPositionGoal> _instance;
} _GripperPositionGoal_default_instance_;
class GripperStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GripperStateRequest> _instance;
} _GripperStateRequest_default_instance_;
class RobotParameterRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotParameterRequest> _instance;
} _RobotParameterRequest_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request> _instance;
} _Request_default_instance_;
class JointPositionLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JointPositionLimit> _instance;
} _JointPositionLimit_default_instance_;
class JointVelocityLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JointVelocityLimit> _instance;
} _JointVelocityLimit_default_instance_;
class JointEffortLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JointEffortLimit> _instance;
} _JointEffortLimit_default_instance_;
class JointLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JointLimit> _instance;
} _JointLimit_default_instance_;
class RobotParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotParameter> _instance;
} _RobotParameter_default_instance_;
class JointStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JointState> _instance;
} _JointState_default_instance_;
class JointStatesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JointStates> _instance;
} _JointStates_default_instance_;
class GripperStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GripperState> _instance;
} _GripperState_default_instance_;
class AcknowledgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Acknowledge> _instance;
} _Acknowledge_default_instance_;
}  // namespace chessbot_simulator_control
static void InitDefaultsscc_info_Acknowledge_simulator_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chessbot_simulator_control::_Acknowledge_default_instance_;
    new (ptr) ::chessbot_simulator_control::Acknowledge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chessbot_simulator_control::Acknowledge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Acknowledge_simulator_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Acknowledge_simulator_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_GripperPositionGoal_simulator_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chessbot_simulator_control::_GripperPositionGoal_default_instance_;
    new (ptr) ::chessbot_simulator_control::GripperPositionGoal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chessbot_simulator_control::GripperPositionGoal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GripperPositionGoal_simulator_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GripperPositionGoal_simulator_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_GripperState_simulator_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chessbot_simulator_control::_GripperState_default_instance_;
    new (ptr) ::chessbot_simulator_control::GripperState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chessbot_simulator_control::GripperState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GripperState_simulator_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GripperState_simulator_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_GripperStateRequest_simulator_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chessbot_simulator_control::_GripperStateRequest_default_instance_;
    new (ptr) ::chessbot_simulator_control::GripperStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chessbot_simulator_control::GripperStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GripperStateRequest_simulator_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GripperStateRequest_simulator_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_JointEffortLimit_simulator_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chessbot_simulator_control::_JointEffortLimit_default_instance_;
    new (ptr) ::chessbot_simulator_control::JointEffortLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chessbot_simulator_control::JointEffortLimit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointEffortLimit_simulator_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JointEffortLimit_simulator_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_JointLimit_simulator_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chessbot_simulator_control::_JointLimit_default_instance_;
    new (ptr) ::chessbot_simulator_control::JointLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chessbot_simulator_control::JointLimit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_JointLimit_simulator_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_JointLimit_simulator_5fcontrol_2eproto}, {
      &scc_info_JointPositionLimit_simulator_5fcontrol_2eproto.base,
      &scc_info_JointVelocityLimit_simulator_5fcontrol_2eproto.base,
      &scc_info_JointEffortLimit_simulator_5fcontrol_2eproto.base,}};

static void InitDefaultsscc_info_JointPositionGoal_simulator_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chessbot_simulator_control::_JointPositionGoal_default_instance_;
    new (ptr) ::chessbot_simulator_control::JointPositionGoal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chessbot_simulator_control::JointPositionGoal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointPositionGoal_simulator_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JointPositionGoal_simulator_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_JointPositionGoalByAxisId_simulator_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chessbot_simulator_control::_JointPositionGoalByAxisId_default_instance_;
    new (ptr) ::chessbot_simulator_control::JointPositionGoalByAxisId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chessbot_simulator_control::JointPositionGoalByAxisId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointPositionGoalByAxisId_simulator_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JointPositionGoalByAxisId_simulator_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_JointPositionLimit_simulator_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chessbot_simulator_control::_JointPositionLimit_default_instance_;
    new (ptr) ::chessbot_simulator_control::JointPositionLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chessbot_simulator_control::JointPositionLimit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointPositionLimit_simulator_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JointPositionLimit_simulator_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_JointState_simulator_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chessbot_simulator_control::_JointState_default_instance_;
    new (ptr) ::chessbot_simulator_control::JointState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chessbot_simulator_control::JointState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointState_simulator_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JointState_simulator_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_JointStateRequest_simulator_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chessbot_simulator_control::_JointStateRequest_default_instance_;
    new (ptr) ::chessbot_simulator_control::JointStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chessbot_simulator_control::JointStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointStateRequest_simulator_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JointStateRequest_simulator_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_JointStateRequestByAxisId_simulator_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chessbot_simulator_control::_JointStateRequestByAxisId_default_instance_;
    new (ptr) ::chessbot_simulator_control::JointStateRequestByAxisId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chessbot_simulator_control::JointStateRequestByAxisId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointStateRequestByAxisId_simulator_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JointStateRequestByAxisId_simulator_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_JointStates_simulator_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chessbot_simulator_control::_JointStates_default_instance_;
    new (ptr) ::chessbot_simulator_control::JointStates();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chessbot_simulator_control::JointStates::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JointStates_simulator_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_JointStates_simulator_5fcontrol_2eproto}, {
      &scc_info_JointState_simulator_5fcontrol_2eproto.base,}};

static void InitDefaultsscc_info_JointTorqueGoal_simulator_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chessbot_simulator_control::_JointTorqueGoal_default_instance_;
    new (ptr) ::chessbot_simulator_control::JointTorqueGoal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chessbot_simulator_control::JointTorqueGoal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointTorqueGoal_simulator_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JointTorqueGoal_simulator_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_JointTorqueGoalByAxisId_simulator_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chessbot_simulator_control::_JointTorqueGoalByAxisId_default_instance_;
    new (ptr) ::chessbot_simulator_control::JointTorqueGoalByAxisId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chessbot_simulator_control::JointTorqueGoalByAxisId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointTorqueGoalByAxisId_simulator_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JointTorqueGoalByAxisId_simulator_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_JointVelocityGoal_simulator_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chessbot_simulator_control::_JointVelocityGoal_default_instance_;
    new (ptr) ::chessbot_simulator_control::JointVelocityGoal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chessbot_simulator_control::JointVelocityGoal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointVelocityGoal_simulator_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JointVelocityGoal_simulator_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_JointVelocityGoalByAxisId_simulator_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chessbot_simulator_control::_JointVelocityGoalByAxisId_default_instance_;
    new (ptr) ::chessbot_simulator_control::JointVelocityGoalByAxisId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chessbot_simulator_control::JointVelocityGoalByAxisId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointVelocityGoalByAxisId_simulator_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JointVelocityGoalByAxisId_simulator_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_JointVelocityLimit_simulator_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chessbot_simulator_control::_JointVelocityLimit_default_instance_;
    new (ptr) ::chessbot_simulator_control::JointVelocityLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chessbot_simulator_control::JointVelocityLimit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointVelocityLimit_simulator_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JointVelocityLimit_simulator_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_Request_simulator_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chessbot_simulator_control::_Request_default_instance_;
    new (ptr) ::chessbot_simulator_control::Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chessbot_simulator_control::Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_Request_simulator_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, 0, InitDefaultsscc_info_Request_simulator_5fcontrol_2eproto}, {
      &scc_info_JointPositionGoal_simulator_5fcontrol_2eproto.base,
      &scc_info_JointVelocityGoal_simulator_5fcontrol_2eproto.base,
      &scc_info_JointTorqueGoal_simulator_5fcontrol_2eproto.base,
      &scc_info_JointPositionGoalByAxisId_simulator_5fcontrol_2eproto.base,
      &scc_info_JointVelocityGoalByAxisId_simulator_5fcontrol_2eproto.base,
      &scc_info_JointTorqueGoalByAxisId_simulator_5fcontrol_2eproto.base,
      &scc_info_JointStateRequest_simulator_5fcontrol_2eproto.base,
      &scc_info_JointStateRequestByAxisId_simulator_5fcontrol_2eproto.base,
      &scc_info_GripperPositionGoal_simulator_5fcontrol_2eproto.base,
      &scc_info_GripperStateRequest_simulator_5fcontrol_2eproto.base,
      &scc_info_RobotParameterRequest_simulator_5fcontrol_2eproto.base,}};

static void InitDefaultsscc_info_RobotParameter_simulator_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chessbot_simulator_control::_RobotParameter_default_instance_;
    new (ptr) ::chessbot_simulator_control::RobotParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chessbot_simulator_control::RobotParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RobotParameter_simulator_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RobotParameter_simulator_5fcontrol_2eproto}, {
      &scc_info_JointLimit_simulator_5fcontrol_2eproto.base,}};

static void InitDefaultsscc_info_RobotParameterRequest_simulator_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chessbot_simulator_control::_RobotParameterRequest_default_instance_;
    new (ptr) ::chessbot_simulator_control::RobotParameterRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chessbot_simulator_control::RobotParameterRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RobotParameterRequest_simulator_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RobotParameterRequest_simulator_5fcontrol_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_simulator_5fcontrol_2eproto[21];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_simulator_5fcontrol_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_simulator_5fcontrol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_simulator_5fcontrol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointPositionGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointPositionGoal, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointVelocityGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointVelocityGoal, velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointTorqueGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointTorqueGoal, torque_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointPositionGoalByAxisId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointPositionGoalByAxisId, axis_id_),
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointPositionGoalByAxisId, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointVelocityGoalByAxisId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointVelocityGoalByAxisId, axis_id_),
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointVelocityGoalByAxisId, velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointTorqueGoalByAxisId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointTorqueGoalByAxisId, axis_id_),
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointTorqueGoalByAxisId, torque_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointStateRequestByAxisId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointStateRequestByAxisId, axis_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::GripperPositionGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::GripperPositionGoal, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::GripperStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::RobotParameterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::Request, type_),
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::Request, set_joint_position_),
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::Request, set_joint_velocity_),
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::Request, set_joint_torque_),
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::Request, set_joint_position_by_axis_id_),
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::Request, set_joint_velocity_by_axis_id_),
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::Request, set_joint_torque_by_axis_id_),
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::Request, get_joint_state_),
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::Request, get_joint_state_by_axis_id_),
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::Request, set_gripper_position_),
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::Request, get_gripper_state_),
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::Request, robot_parameter_get_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointPositionLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointPositionLimit, upper_limit_),
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointPositionLimit, lower_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointVelocityLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointVelocityLimit, upper_limit_),
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointVelocityLimit, lower_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointEffortLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointEffortLimit, upper_limit_),
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointEffortLimit, lower_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointLimit, type_),
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointLimit, position_limit_),
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointLimit, velocity_limit_),
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointLimit, effort_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::RobotParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::RobotParameter, axes_number_),
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::RobotParameter, joint_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointState, axis_id_),
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointState, position_),
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointState, velocity_),
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointState, torque_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointStates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::JointStates, states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::GripperState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::GripperState, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::Acknowledge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chessbot_simulator_control::Acknowledge, acknowledge_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::chessbot_simulator_control::JointPositionGoal)},
  { 6, -1, sizeof(::chessbot_simulator_control::JointVelocityGoal)},
  { 12, -1, sizeof(::chessbot_simulator_control::JointTorqueGoal)},
  { 18, -1, sizeof(::chessbot_simulator_control::JointPositionGoalByAxisId)},
  { 25, -1, sizeof(::chessbot_simulator_control::JointVelocityGoalByAxisId)},
  { 32, -1, sizeof(::chessbot_simulator_control::JointTorqueGoalByAxisId)},
  { 39, -1, sizeof(::chessbot_simulator_control::JointStateRequest)},
  { 44, -1, sizeof(::chessbot_simulator_control::JointStateRequestByAxisId)},
  { 50, -1, sizeof(::chessbot_simulator_control::GripperPositionGoal)},
  { 56, -1, sizeof(::chessbot_simulator_control::GripperStateRequest)},
  { 61, -1, sizeof(::chessbot_simulator_control::RobotParameterRequest)},
  { 66, -1, sizeof(::chessbot_simulator_control::Request)},
  { 83, -1, sizeof(::chessbot_simulator_control::JointPositionLimit)},
  { 90, -1, sizeof(::chessbot_simulator_control::JointVelocityLimit)},
  { 97, -1, sizeof(::chessbot_simulator_control::JointEffortLimit)},
  { 104, -1, sizeof(::chessbot_simulator_control::JointLimit)},
  { 113, -1, sizeof(::chessbot_simulator_control::RobotParameter)},
  { 120, -1, sizeof(::chessbot_simulator_control::JointState)},
  { 129, -1, sizeof(::chessbot_simulator_control::JointStates)},
  { 135, -1, sizeof(::chessbot_simulator_control::GripperState)},
  { 141, -1, sizeof(::chessbot_simulator_control::Acknowledge)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chessbot_simulator_control::_JointPositionGoal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chessbot_simulator_control::_JointVelocityGoal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chessbot_simulator_control::_JointTorqueGoal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chessbot_simulator_control::_JointPositionGoalByAxisId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chessbot_simulator_control::_JointVelocityGoalByAxisId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chessbot_simulator_control::_JointTorqueGoalByAxisId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chessbot_simulator_control::_JointStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chessbot_simulator_control::_JointStateRequestByAxisId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chessbot_simulator_control::_GripperPositionGoal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chessbot_simulator_control::_GripperStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chessbot_simulator_control::_RobotParameterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chessbot_simulator_control::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chessbot_simulator_control::_JointPositionLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chessbot_simulator_control::_JointVelocityLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chessbot_simulator_control::_JointEffortLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chessbot_simulator_control::_JointLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chessbot_simulator_control::_RobotParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chessbot_simulator_control::_JointState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chessbot_simulator_control::_JointStates_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chessbot_simulator_control::_GripperState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chessbot_simulator_control::_Acknowledge_default_instance_),
};

const char descriptor_table_protodef_simulator_5fcontrol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027simulator_control.proto\022\032chessbot_simu"
  "lator_control\"%\n\021JointPositionGoal\022\020\n\010po"
  "sition\030\001 \003(\001\"%\n\021JointVelocityGoal\022\020\n\010vel"
  "ocity\030\001 \003(\001\"!\n\017JointTorqueGoal\022\016\n\006torque"
  "\030\001 \003(\001\">\n\031JointPositionGoalByAxisId\022\017\n\007a"
  "xis_id\030\001 \001(\005\022\020\n\010position\030\002 \001(\001\">\n\031JointV"
  "elocityGoalByAxisId\022\017\n\007axis_id\030\001 \001(\005\022\020\n\010"
  "velocity\030\002 \001(\001\":\n\027JointTorqueGoalByAxisI"
  "d\022\017\n\007axis_id\030\001 \001(\005\022\016\n\006torque\030\002 \001(\001\"\023\n\021Jo"
  "intStateRequest\",\n\031JointStateRequestByAx"
  "isId\022\017\n\007axis_id\030\001 \001(\005\"\'\n\023GripperPosition"
  "Goal\022\020\n\010position\030\001 \001(\001\"\025\n\023GripperStateRe"
  "quest\"\027\n\025RobotParameterRequest\"\226\n\n\007Reque"
  "st\022=\n\004type\030\001 \001(\0162/.chessbot_simulator_co"
  "ntrol.Request.MessageType\022I\n\022set_joint_p"
  "osition\030\002 \001(\0132-.chessbot_simulator_contr"
  "ol.JointPositionGoal\022I\n\022set_joint_veloci"
  "ty\030\003 \001(\0132-.chessbot_simulator_control.Jo"
  "intVelocityGoal\022E\n\020set_joint_torque\030\004 \001("
  "\0132+.chessbot_simulator_control.JointTorq"
  "ueGoal\022\\\n\035set_joint_position_by_axis_id\030"
  "\005 \001(\01325.chessbot_simulator_control.Joint"
  "PositionGoalByAxisId\022\\\n\035set_joint_veloci"
  "ty_by_axis_id\030\006 \001(\01325.chessbot_simulator"
  "_control.JointVelocityGoalByAxisId\022X\n\033se"
  "t_joint_torque_by_axis_id\030\007 \001(\01323.chessb"
  "ot_simulator_control.JointTorqueGoalByAx"
  "isId\022F\n\017get_joint_state\030\010 \001(\0132-.chessbot"
  "_simulator_control.JointStateRequest\022Y\n\032"
  "get_joint_state_by_axis_id\030\t \001(\01325.chess"
  "bot_simulator_control.JointStateRequestB"
  "yAxisId\022M\n\024set_gripper_position\030\n \001(\0132/."
  "chessbot_simulator_control.GripperPositi"
  "onGoal\022J\n\021get_gripper_state\030\013 \001(\0132/.ches"
  "sbot_simulator_control.GripperStateReque"
  "st\022N\n\023robot_parameter_get\030\014 \001(\01321.chessb"
  "ot_simulator_control.RobotParameterReque"
  "st\"\312\002\n\013MessageType\022\017\n\013UNSPECIFIED\020\000\022\026\n\022S"
  "ET_JOINT_POSITION\020\001\022\026\n\022SET_JOINT_VELOCIT"
  "Y\020\002\022\024\n\020SET_JOINT_TORQUE\020\003\022!\n\035SET_JOINT_P"
  "OSITION_BY_AXIS_ID\020\004\022!\n\035SET_JOINT_VELOCI"
  "TY_BY_AXIS_ID\020\005\022\037\n\033SET_JOINT_TORQUE_BY_A"
  "XIS_ID\020\006\022\023\n\017GET_JOINT_STATE\020\007\022\036\n\032GET_JOI"
  "NT_STATE_BY_AXIS_ID\020\010\022\030\n\024SET_GRIPPER_POS"
  "ITION\020\t\022\025\n\021GET_GRIPPER_STATE\020\n\022\027\n\023GET_RO"
  "BOT_PARAMETER\020\013\">\n\022JointPositionLimit\022\023\n"
  "\013upper_limit\030\001 \001(\001\022\023\n\013lower_limit\030\002 \001(\001\""
  ">\n\022JointVelocityLimit\022\023\n\013upper_limit\030\001 \001"
  "(\001\022\023\n\013lower_limit\030\002 \001(\001\"<\n\020JointEffortLi"
  "mit\022\023\n\013upper_limit\030\001 \001(\001\022\023\n\013lower_limit\030"
  "\002 \001(\001\"\354\002\n\nJointLimit\022>\n\004type\030\001 \001(\01620.che"
  "ssbot_simulator_control.JointLimit.Joint"
  "Type\022F\n\016position_limit\030\002 \001(\0132..chessbot_"
  "simulator_control.JointPositionLimit\022F\n\016"
  "velocity_limit\030\003 \001(\0132..chessbot_simulato"
  "r_control.JointVelocityLimit\022B\n\014effort_l"
  "imit\030\004 \001(\0132,.chessbot_simulator_control."
  "JointEffortLimit\"J\n\tJointType\022\032\n\026JOINT_T"
  "YPE_UNSPECIFIED\020\000\022\016\n\nROTATIONAL\020\001\022\021\n\rTRA"
  "NSLATIONAL\020\002\"b\n\016RobotParameter\022\023\n\013axes_n"
  "umber\030\001 \001(\005\022;\n\013joint_limit\030\002 \003(\0132&.chess"
  "bot_simulator_control.JointLimit\"Q\n\nJoin"
  "tState\022\017\n\007axis_id\030\001 \001(\005\022\020\n\010position\030\002 \001("
  "\001\022\020\n\010velocity\030\003 \001(\001\022\016\n\006torque\030\004 \001(\001\"E\n\013J"
  "ointStates\0226\n\006states\030\001 \003(\0132&.chessbot_si"
  "mulator_control.JointState\" \n\014GripperSta"
  "te\022\020\n\010position\030\001 \001(\001\"\"\n\013Acknowledge\022\023\n\013a"
  "cknowledge\030\001 \001(\tB\035\252\002\032chessbot-simulator-"
  "controlb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_simulator_5fcontrol_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_simulator_5fcontrol_2eproto_sccs[21] = {
  &scc_info_Acknowledge_simulator_5fcontrol_2eproto.base,
  &scc_info_GripperPositionGoal_simulator_5fcontrol_2eproto.base,
  &scc_info_GripperState_simulator_5fcontrol_2eproto.base,
  &scc_info_GripperStateRequest_simulator_5fcontrol_2eproto.base,
  &scc_info_JointEffortLimit_simulator_5fcontrol_2eproto.base,
  &scc_info_JointLimit_simulator_5fcontrol_2eproto.base,
  &scc_info_JointPositionGoal_simulator_5fcontrol_2eproto.base,
  &scc_info_JointPositionGoalByAxisId_simulator_5fcontrol_2eproto.base,
  &scc_info_JointPositionLimit_simulator_5fcontrol_2eproto.base,
  &scc_info_JointState_simulator_5fcontrol_2eproto.base,
  &scc_info_JointStateRequest_simulator_5fcontrol_2eproto.base,
  &scc_info_JointStateRequestByAxisId_simulator_5fcontrol_2eproto.base,
  &scc_info_JointStates_simulator_5fcontrol_2eproto.base,
  &scc_info_JointTorqueGoal_simulator_5fcontrol_2eproto.base,
  &scc_info_JointTorqueGoalByAxisId_simulator_5fcontrol_2eproto.base,
  &scc_info_JointVelocityGoal_simulator_5fcontrol_2eproto.base,
  &scc_info_JointVelocityGoalByAxisId_simulator_5fcontrol_2eproto.base,
  &scc_info_JointVelocityLimit_simulator_5fcontrol_2eproto.base,
  &scc_info_Request_simulator_5fcontrol_2eproto.base,
  &scc_info_RobotParameter_simulator_5fcontrol_2eproto.base,
  &scc_info_RobotParameterRequest_simulator_5fcontrol_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_simulator_5fcontrol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_simulator_5fcontrol_2eproto = {
  false, false, descriptor_table_protodef_simulator_5fcontrol_2eproto, "simulator_control.proto", 2735,
  &descriptor_table_simulator_5fcontrol_2eproto_once, descriptor_table_simulator_5fcontrol_2eproto_sccs, descriptor_table_simulator_5fcontrol_2eproto_deps, 21, 0,
  schemas, file_default_instances, TableStruct_simulator_5fcontrol_2eproto::offsets,
  file_level_metadata_simulator_5fcontrol_2eproto, 21, file_level_enum_descriptors_simulator_5fcontrol_2eproto, file_level_service_descriptors_simulator_5fcontrol_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_simulator_5fcontrol_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_simulator_5fcontrol_2eproto)), true);
namespace chessbot_simulator_control {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_simulator_5fcontrol_2eproto);
  return file_level_enum_descriptors_simulator_5fcontrol_2eproto[0];
}
bool Request_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Request_MessageType Request::UNSPECIFIED;
constexpr Request_MessageType Request::SET_JOINT_POSITION;
constexpr Request_MessageType Request::SET_JOINT_VELOCITY;
constexpr Request_MessageType Request::SET_JOINT_TORQUE;
constexpr Request_MessageType Request::SET_JOINT_POSITION_BY_AXIS_ID;
constexpr Request_MessageType Request::SET_JOINT_VELOCITY_BY_AXIS_ID;
constexpr Request_MessageType Request::SET_JOINT_TORQUE_BY_AXIS_ID;
constexpr Request_MessageType Request::GET_JOINT_STATE;
constexpr Request_MessageType Request::GET_JOINT_STATE_BY_AXIS_ID;
constexpr Request_MessageType Request::SET_GRIPPER_POSITION;
constexpr Request_MessageType Request::GET_GRIPPER_STATE;
constexpr Request_MessageType Request::GET_ROBOT_PARAMETER;
constexpr Request_MessageType Request::MessageType_MIN;
constexpr Request_MessageType Request::MessageType_MAX;
constexpr int Request::MessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JointLimit_JointType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_simulator_5fcontrol_2eproto);
  return file_level_enum_descriptors_simulator_5fcontrol_2eproto[1];
}
bool JointLimit_JointType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr JointLimit_JointType JointLimit::JOINT_TYPE_UNSPECIFIED;
constexpr JointLimit_JointType JointLimit::ROTATIONAL;
constexpr JointLimit_JointType JointLimit::TRANSLATIONAL;
constexpr JointLimit_JointType JointLimit::JointType_MIN;
constexpr JointLimit_JointType JointLimit::JointType_MAX;
constexpr int JointLimit::JointType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void JointPositionGoal::InitAsDefaultInstance() {
}
class JointPositionGoal::_Internal {
 public:
};

JointPositionGoal::JointPositionGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  position_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chessbot_simulator_control.JointPositionGoal)
}
JointPositionGoal::JointPositionGoal(const JointPositionGoal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      position_(from.position_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chessbot_simulator_control.JointPositionGoal)
}

void JointPositionGoal::SharedCtor() {
}

JointPositionGoal::~JointPositionGoal() {
  // @@protoc_insertion_point(destructor:chessbot_simulator_control.JointPositionGoal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JointPositionGoal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JointPositionGoal::ArenaDtor(void* object) {
  JointPositionGoal* _this = reinterpret_cast< JointPositionGoal* >(object);
  (void)_this;
}
void JointPositionGoal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JointPositionGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JointPositionGoal& JointPositionGoal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JointPositionGoal_simulator_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void JointPositionGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:chessbot_simulator_control.JointPositionGoal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointPositionGoal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JointPositionGoal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chessbot_simulator_control.JointPositionGoal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double position = 1;
  if (this->_internal_position_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chessbot_simulator_control.JointPositionGoal)
  return target;
}

size_t JointPositionGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chessbot_simulator_control.JointPositionGoal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double position = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _position_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointPositionGoal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chessbot_simulator_control.JointPositionGoal)
  GOOGLE_DCHECK_NE(&from, this);
  const JointPositionGoal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JointPositionGoal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chessbot_simulator_control.JointPositionGoal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chessbot_simulator_control.JointPositionGoal)
    MergeFrom(*source);
  }
}

void JointPositionGoal::MergeFrom(const JointPositionGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chessbot_simulator_control.JointPositionGoal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
}

void JointPositionGoal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chessbot_simulator_control.JointPositionGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointPositionGoal::CopyFrom(const JointPositionGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chessbot_simulator_control.JointPositionGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointPositionGoal::IsInitialized() const {
  return true;
}

void JointPositionGoal::InternalSwap(JointPositionGoal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  position_.InternalSwap(&other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JointPositionGoal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JointVelocityGoal::InitAsDefaultInstance() {
}
class JointVelocityGoal::_Internal {
 public:
};

JointVelocityGoal::JointVelocityGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  velocity_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chessbot_simulator_control.JointVelocityGoal)
}
JointVelocityGoal::JointVelocityGoal(const JointVelocityGoal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      velocity_(from.velocity_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chessbot_simulator_control.JointVelocityGoal)
}

void JointVelocityGoal::SharedCtor() {
}

JointVelocityGoal::~JointVelocityGoal() {
  // @@protoc_insertion_point(destructor:chessbot_simulator_control.JointVelocityGoal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JointVelocityGoal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JointVelocityGoal::ArenaDtor(void* object) {
  JointVelocityGoal* _this = reinterpret_cast< JointVelocityGoal* >(object);
  (void)_this;
}
void JointVelocityGoal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JointVelocityGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JointVelocityGoal& JointVelocityGoal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JointVelocityGoal_simulator_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void JointVelocityGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:chessbot_simulator_control.JointVelocityGoal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  velocity_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointVelocityGoal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double velocity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_velocity(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_velocity(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JointVelocityGoal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chessbot_simulator_control.JointVelocityGoal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double velocity = 1;
  if (this->_internal_velocity_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_velocity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chessbot_simulator_control.JointVelocityGoal)
  return target;
}

size_t JointVelocityGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chessbot_simulator_control.JointVelocityGoal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double velocity = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_velocity_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _velocity_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointVelocityGoal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chessbot_simulator_control.JointVelocityGoal)
  GOOGLE_DCHECK_NE(&from, this);
  const JointVelocityGoal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JointVelocityGoal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chessbot_simulator_control.JointVelocityGoal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chessbot_simulator_control.JointVelocityGoal)
    MergeFrom(*source);
  }
}

void JointVelocityGoal::MergeFrom(const JointVelocityGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chessbot_simulator_control.JointVelocityGoal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  velocity_.MergeFrom(from.velocity_);
}

void JointVelocityGoal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chessbot_simulator_control.JointVelocityGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointVelocityGoal::CopyFrom(const JointVelocityGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chessbot_simulator_control.JointVelocityGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointVelocityGoal::IsInitialized() const {
  return true;
}

void JointVelocityGoal::InternalSwap(JointVelocityGoal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  velocity_.InternalSwap(&other->velocity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JointVelocityGoal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JointTorqueGoal::InitAsDefaultInstance() {
}
class JointTorqueGoal::_Internal {
 public:
};

JointTorqueGoal::JointTorqueGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  torque_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chessbot_simulator_control.JointTorqueGoal)
}
JointTorqueGoal::JointTorqueGoal(const JointTorqueGoal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      torque_(from.torque_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chessbot_simulator_control.JointTorqueGoal)
}

void JointTorqueGoal::SharedCtor() {
}

JointTorqueGoal::~JointTorqueGoal() {
  // @@protoc_insertion_point(destructor:chessbot_simulator_control.JointTorqueGoal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JointTorqueGoal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JointTorqueGoal::ArenaDtor(void* object) {
  JointTorqueGoal* _this = reinterpret_cast< JointTorqueGoal* >(object);
  (void)_this;
}
void JointTorqueGoal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JointTorqueGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JointTorqueGoal& JointTorqueGoal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JointTorqueGoal_simulator_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void JointTorqueGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:chessbot_simulator_control.JointTorqueGoal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  torque_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointTorqueGoal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double torque = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_torque(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_torque(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JointTorqueGoal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chessbot_simulator_control.JointTorqueGoal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double torque = 1;
  if (this->_internal_torque_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_torque(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chessbot_simulator_control.JointTorqueGoal)
  return target;
}

size_t JointTorqueGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chessbot_simulator_control.JointTorqueGoal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double torque = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_torque_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _torque_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointTorqueGoal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chessbot_simulator_control.JointTorqueGoal)
  GOOGLE_DCHECK_NE(&from, this);
  const JointTorqueGoal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JointTorqueGoal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chessbot_simulator_control.JointTorqueGoal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chessbot_simulator_control.JointTorqueGoal)
    MergeFrom(*source);
  }
}

void JointTorqueGoal::MergeFrom(const JointTorqueGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chessbot_simulator_control.JointTorqueGoal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  torque_.MergeFrom(from.torque_);
}

void JointTorqueGoal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chessbot_simulator_control.JointTorqueGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointTorqueGoal::CopyFrom(const JointTorqueGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chessbot_simulator_control.JointTorqueGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointTorqueGoal::IsInitialized() const {
  return true;
}

void JointTorqueGoal::InternalSwap(JointTorqueGoal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  torque_.InternalSwap(&other->torque_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JointTorqueGoal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JointPositionGoalByAxisId::InitAsDefaultInstance() {
}
class JointPositionGoalByAxisId::_Internal {
 public:
};

JointPositionGoalByAxisId::JointPositionGoalByAxisId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chessbot_simulator_control.JointPositionGoalByAxisId)
}
JointPositionGoalByAxisId::JointPositionGoalByAxisId(const JointPositionGoalByAxisId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&axis_id_) -
    reinterpret_cast<char*>(&position_)) + sizeof(axis_id_));
  // @@protoc_insertion_point(copy_constructor:chessbot_simulator_control.JointPositionGoalByAxisId)
}

void JointPositionGoalByAxisId::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&axis_id_) -
      reinterpret_cast<char*>(&position_)) + sizeof(axis_id_));
}

JointPositionGoalByAxisId::~JointPositionGoalByAxisId() {
  // @@protoc_insertion_point(destructor:chessbot_simulator_control.JointPositionGoalByAxisId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JointPositionGoalByAxisId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JointPositionGoalByAxisId::ArenaDtor(void* object) {
  JointPositionGoalByAxisId* _this = reinterpret_cast< JointPositionGoalByAxisId* >(object);
  (void)_this;
}
void JointPositionGoalByAxisId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JointPositionGoalByAxisId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JointPositionGoalByAxisId& JointPositionGoalByAxisId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JointPositionGoalByAxisId_simulator_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void JointPositionGoalByAxisId::Clear() {
// @@protoc_insertion_point(message_clear_start:chessbot_simulator_control.JointPositionGoalByAxisId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&axis_id_) -
      reinterpret_cast<char*>(&position_)) + sizeof(axis_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointPositionGoalByAxisId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 axis_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axis_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JointPositionGoalByAxisId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chessbot_simulator_control.JointPositionGoalByAxisId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 axis_id = 1;
  if (this->axis_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis_id(), target);
  }

  // double position = 2;
  if (!(this->position() <= 0 && this->position() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chessbot_simulator_control.JointPositionGoalByAxisId)
  return target;
}

size_t JointPositionGoalByAxisId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chessbot_simulator_control.JointPositionGoalByAxisId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double position = 2;
  if (!(this->position() <= 0 && this->position() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 axis_id = 1;
  if (this->axis_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axis_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointPositionGoalByAxisId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chessbot_simulator_control.JointPositionGoalByAxisId)
  GOOGLE_DCHECK_NE(&from, this);
  const JointPositionGoalByAxisId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JointPositionGoalByAxisId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chessbot_simulator_control.JointPositionGoalByAxisId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chessbot_simulator_control.JointPositionGoalByAxisId)
    MergeFrom(*source);
  }
}

void JointPositionGoalByAxisId::MergeFrom(const JointPositionGoalByAxisId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chessbot_simulator_control.JointPositionGoalByAxisId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.position() <= 0 && from.position() >= 0)) {
    _internal_set_position(from._internal_position());
  }
  if (from.axis_id() != 0) {
    _internal_set_axis_id(from._internal_axis_id());
  }
}

void JointPositionGoalByAxisId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chessbot_simulator_control.JointPositionGoalByAxisId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointPositionGoalByAxisId::CopyFrom(const JointPositionGoalByAxisId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chessbot_simulator_control.JointPositionGoalByAxisId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointPositionGoalByAxisId::IsInitialized() const {
  return true;
}

void JointPositionGoalByAxisId::InternalSwap(JointPositionGoalByAxisId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JointPositionGoalByAxisId, axis_id_)
      + sizeof(JointPositionGoalByAxisId::axis_id_)
      - PROTOBUF_FIELD_OFFSET(JointPositionGoalByAxisId, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JointPositionGoalByAxisId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JointVelocityGoalByAxisId::InitAsDefaultInstance() {
}
class JointVelocityGoalByAxisId::_Internal {
 public:
};

JointVelocityGoalByAxisId::JointVelocityGoalByAxisId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chessbot_simulator_control.JointVelocityGoalByAxisId)
}
JointVelocityGoalByAxisId::JointVelocityGoalByAxisId(const JointVelocityGoalByAxisId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&velocity_, &from.velocity_,
    static_cast<size_t>(reinterpret_cast<char*>(&axis_id_) -
    reinterpret_cast<char*>(&velocity_)) + sizeof(axis_id_));
  // @@protoc_insertion_point(copy_constructor:chessbot_simulator_control.JointVelocityGoalByAxisId)
}

void JointVelocityGoalByAxisId::SharedCtor() {
  ::memset(&velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&axis_id_) -
      reinterpret_cast<char*>(&velocity_)) + sizeof(axis_id_));
}

JointVelocityGoalByAxisId::~JointVelocityGoalByAxisId() {
  // @@protoc_insertion_point(destructor:chessbot_simulator_control.JointVelocityGoalByAxisId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JointVelocityGoalByAxisId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JointVelocityGoalByAxisId::ArenaDtor(void* object) {
  JointVelocityGoalByAxisId* _this = reinterpret_cast< JointVelocityGoalByAxisId* >(object);
  (void)_this;
}
void JointVelocityGoalByAxisId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JointVelocityGoalByAxisId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JointVelocityGoalByAxisId& JointVelocityGoalByAxisId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JointVelocityGoalByAxisId_simulator_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void JointVelocityGoalByAxisId::Clear() {
// @@protoc_insertion_point(message_clear_start:chessbot_simulator_control.JointVelocityGoalByAxisId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&axis_id_) -
      reinterpret_cast<char*>(&velocity_)) + sizeof(axis_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointVelocityGoalByAxisId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 axis_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axis_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JointVelocityGoalByAxisId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chessbot_simulator_control.JointVelocityGoalByAxisId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 axis_id = 1;
  if (this->axis_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis_id(), target);
  }

  // double velocity = 2;
  if (!(this->velocity() <= 0 && this->velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_velocity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chessbot_simulator_control.JointVelocityGoalByAxisId)
  return target;
}

size_t JointVelocityGoalByAxisId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chessbot_simulator_control.JointVelocityGoalByAxisId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double velocity = 2;
  if (!(this->velocity() <= 0 && this->velocity() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 axis_id = 1;
  if (this->axis_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axis_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointVelocityGoalByAxisId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chessbot_simulator_control.JointVelocityGoalByAxisId)
  GOOGLE_DCHECK_NE(&from, this);
  const JointVelocityGoalByAxisId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JointVelocityGoalByAxisId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chessbot_simulator_control.JointVelocityGoalByAxisId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chessbot_simulator_control.JointVelocityGoalByAxisId)
    MergeFrom(*source);
  }
}

void JointVelocityGoalByAxisId::MergeFrom(const JointVelocityGoalByAxisId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chessbot_simulator_control.JointVelocityGoalByAxisId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.velocity() <= 0 && from.velocity() >= 0)) {
    _internal_set_velocity(from._internal_velocity());
  }
  if (from.axis_id() != 0) {
    _internal_set_axis_id(from._internal_axis_id());
  }
}

void JointVelocityGoalByAxisId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chessbot_simulator_control.JointVelocityGoalByAxisId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointVelocityGoalByAxisId::CopyFrom(const JointVelocityGoalByAxisId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chessbot_simulator_control.JointVelocityGoalByAxisId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointVelocityGoalByAxisId::IsInitialized() const {
  return true;
}

void JointVelocityGoalByAxisId::InternalSwap(JointVelocityGoalByAxisId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JointVelocityGoalByAxisId, axis_id_)
      + sizeof(JointVelocityGoalByAxisId::axis_id_)
      - PROTOBUF_FIELD_OFFSET(JointVelocityGoalByAxisId, velocity_)>(
          reinterpret_cast<char*>(&velocity_),
          reinterpret_cast<char*>(&other->velocity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JointVelocityGoalByAxisId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JointTorqueGoalByAxisId::InitAsDefaultInstance() {
}
class JointTorqueGoalByAxisId::_Internal {
 public:
};

JointTorqueGoalByAxisId::JointTorqueGoalByAxisId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chessbot_simulator_control.JointTorqueGoalByAxisId)
}
JointTorqueGoalByAxisId::JointTorqueGoalByAxisId(const JointTorqueGoalByAxisId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&torque_, &from.torque_,
    static_cast<size_t>(reinterpret_cast<char*>(&axis_id_) -
    reinterpret_cast<char*>(&torque_)) + sizeof(axis_id_));
  // @@protoc_insertion_point(copy_constructor:chessbot_simulator_control.JointTorqueGoalByAxisId)
}

void JointTorqueGoalByAxisId::SharedCtor() {
  ::memset(&torque_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&axis_id_) -
      reinterpret_cast<char*>(&torque_)) + sizeof(axis_id_));
}

JointTorqueGoalByAxisId::~JointTorqueGoalByAxisId() {
  // @@protoc_insertion_point(destructor:chessbot_simulator_control.JointTorqueGoalByAxisId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JointTorqueGoalByAxisId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JointTorqueGoalByAxisId::ArenaDtor(void* object) {
  JointTorqueGoalByAxisId* _this = reinterpret_cast< JointTorqueGoalByAxisId* >(object);
  (void)_this;
}
void JointTorqueGoalByAxisId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JointTorqueGoalByAxisId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JointTorqueGoalByAxisId& JointTorqueGoalByAxisId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JointTorqueGoalByAxisId_simulator_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void JointTorqueGoalByAxisId::Clear() {
// @@protoc_insertion_point(message_clear_start:chessbot_simulator_control.JointTorqueGoalByAxisId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&torque_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&axis_id_) -
      reinterpret_cast<char*>(&torque_)) + sizeof(axis_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointTorqueGoalByAxisId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 axis_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axis_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double torque = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JointTorqueGoalByAxisId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chessbot_simulator_control.JointTorqueGoalByAxisId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 axis_id = 1;
  if (this->axis_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis_id(), target);
  }

  // double torque = 2;
  if (!(this->torque() <= 0 && this->torque() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_torque(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chessbot_simulator_control.JointTorqueGoalByAxisId)
  return target;
}

size_t JointTorqueGoalByAxisId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chessbot_simulator_control.JointTorqueGoalByAxisId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double torque = 2;
  if (!(this->torque() <= 0 && this->torque() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 axis_id = 1;
  if (this->axis_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axis_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointTorqueGoalByAxisId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chessbot_simulator_control.JointTorqueGoalByAxisId)
  GOOGLE_DCHECK_NE(&from, this);
  const JointTorqueGoalByAxisId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JointTorqueGoalByAxisId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chessbot_simulator_control.JointTorqueGoalByAxisId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chessbot_simulator_control.JointTorqueGoalByAxisId)
    MergeFrom(*source);
  }
}

void JointTorqueGoalByAxisId::MergeFrom(const JointTorqueGoalByAxisId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chessbot_simulator_control.JointTorqueGoalByAxisId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.torque() <= 0 && from.torque() >= 0)) {
    _internal_set_torque(from._internal_torque());
  }
  if (from.axis_id() != 0) {
    _internal_set_axis_id(from._internal_axis_id());
  }
}

void JointTorqueGoalByAxisId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chessbot_simulator_control.JointTorqueGoalByAxisId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointTorqueGoalByAxisId::CopyFrom(const JointTorqueGoalByAxisId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chessbot_simulator_control.JointTorqueGoalByAxisId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointTorqueGoalByAxisId::IsInitialized() const {
  return true;
}

void JointTorqueGoalByAxisId::InternalSwap(JointTorqueGoalByAxisId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JointTorqueGoalByAxisId, axis_id_)
      + sizeof(JointTorqueGoalByAxisId::axis_id_)
      - PROTOBUF_FIELD_OFFSET(JointTorqueGoalByAxisId, torque_)>(
          reinterpret_cast<char*>(&torque_),
          reinterpret_cast<char*>(&other->torque_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JointTorqueGoalByAxisId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JointStateRequest::InitAsDefaultInstance() {
}
class JointStateRequest::_Internal {
 public:
};

JointStateRequest::JointStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chessbot_simulator_control.JointStateRequest)
}
JointStateRequest::JointStateRequest(const JointStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chessbot_simulator_control.JointStateRequest)
}

void JointStateRequest::SharedCtor() {
}

JointStateRequest::~JointStateRequest() {
  // @@protoc_insertion_point(destructor:chessbot_simulator_control.JointStateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JointStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JointStateRequest::ArenaDtor(void* object) {
  JointStateRequest* _this = reinterpret_cast< JointStateRequest* >(object);
  (void)_this;
}
void JointStateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JointStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JointStateRequest& JointStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JointStateRequest_simulator_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void JointStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chessbot_simulator_control.JointStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JointStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chessbot_simulator_control.JointStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chessbot_simulator_control.JointStateRequest)
  return target;
}

size_t JointStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chessbot_simulator_control.JointStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chessbot_simulator_control.JointStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JointStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JointStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chessbot_simulator_control.JointStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chessbot_simulator_control.JointStateRequest)
    MergeFrom(*source);
  }
}

void JointStateRequest::MergeFrom(const JointStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chessbot_simulator_control.JointStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void JointStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chessbot_simulator_control.JointStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointStateRequest::CopyFrom(const JointStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chessbot_simulator_control.JointStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointStateRequest::IsInitialized() const {
  return true;
}

void JointStateRequest::InternalSwap(JointStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JointStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JointStateRequestByAxisId::InitAsDefaultInstance() {
}
class JointStateRequestByAxisId::_Internal {
 public:
};

JointStateRequestByAxisId::JointStateRequestByAxisId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chessbot_simulator_control.JointStateRequestByAxisId)
}
JointStateRequestByAxisId::JointStateRequestByAxisId(const JointStateRequestByAxisId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  axis_id_ = from.axis_id_;
  // @@protoc_insertion_point(copy_constructor:chessbot_simulator_control.JointStateRequestByAxisId)
}

void JointStateRequestByAxisId::SharedCtor() {
  axis_id_ = 0;
}

JointStateRequestByAxisId::~JointStateRequestByAxisId() {
  // @@protoc_insertion_point(destructor:chessbot_simulator_control.JointStateRequestByAxisId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JointStateRequestByAxisId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JointStateRequestByAxisId::ArenaDtor(void* object) {
  JointStateRequestByAxisId* _this = reinterpret_cast< JointStateRequestByAxisId* >(object);
  (void)_this;
}
void JointStateRequestByAxisId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JointStateRequestByAxisId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JointStateRequestByAxisId& JointStateRequestByAxisId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JointStateRequestByAxisId_simulator_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void JointStateRequestByAxisId::Clear() {
// @@protoc_insertion_point(message_clear_start:chessbot_simulator_control.JointStateRequestByAxisId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  axis_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointStateRequestByAxisId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 axis_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axis_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JointStateRequestByAxisId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chessbot_simulator_control.JointStateRequestByAxisId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 axis_id = 1;
  if (this->axis_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chessbot_simulator_control.JointStateRequestByAxisId)
  return target;
}

size_t JointStateRequestByAxisId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chessbot_simulator_control.JointStateRequestByAxisId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 axis_id = 1;
  if (this->axis_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axis_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointStateRequestByAxisId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chessbot_simulator_control.JointStateRequestByAxisId)
  GOOGLE_DCHECK_NE(&from, this);
  const JointStateRequestByAxisId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JointStateRequestByAxisId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chessbot_simulator_control.JointStateRequestByAxisId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chessbot_simulator_control.JointStateRequestByAxisId)
    MergeFrom(*source);
  }
}

void JointStateRequestByAxisId::MergeFrom(const JointStateRequestByAxisId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chessbot_simulator_control.JointStateRequestByAxisId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.axis_id() != 0) {
    _internal_set_axis_id(from._internal_axis_id());
  }
}

void JointStateRequestByAxisId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chessbot_simulator_control.JointStateRequestByAxisId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointStateRequestByAxisId::CopyFrom(const JointStateRequestByAxisId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chessbot_simulator_control.JointStateRequestByAxisId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointStateRequestByAxisId::IsInitialized() const {
  return true;
}

void JointStateRequestByAxisId::InternalSwap(JointStateRequestByAxisId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(axis_id_, other->axis_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JointStateRequestByAxisId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GripperPositionGoal::InitAsDefaultInstance() {
}
class GripperPositionGoal::_Internal {
 public:
};

GripperPositionGoal::GripperPositionGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chessbot_simulator_control.GripperPositionGoal)
}
GripperPositionGoal::GripperPositionGoal(const GripperPositionGoal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  position_ = from.position_;
  // @@protoc_insertion_point(copy_constructor:chessbot_simulator_control.GripperPositionGoal)
}

void GripperPositionGoal::SharedCtor() {
  position_ = 0;
}

GripperPositionGoal::~GripperPositionGoal() {
  // @@protoc_insertion_point(destructor:chessbot_simulator_control.GripperPositionGoal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GripperPositionGoal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GripperPositionGoal::ArenaDtor(void* object) {
  GripperPositionGoal* _this = reinterpret_cast< GripperPositionGoal* >(object);
  (void)_this;
}
void GripperPositionGoal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GripperPositionGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GripperPositionGoal& GripperPositionGoal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GripperPositionGoal_simulator_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void GripperPositionGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:chessbot_simulator_control.GripperPositionGoal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GripperPositionGoal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GripperPositionGoal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chessbot_simulator_control.GripperPositionGoal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double position = 1;
  if (!(this->position() <= 0 && this->position() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chessbot_simulator_control.GripperPositionGoal)
  return target;
}

size_t GripperPositionGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chessbot_simulator_control.GripperPositionGoal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double position = 1;
  if (!(this->position() <= 0 && this->position() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GripperPositionGoal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chessbot_simulator_control.GripperPositionGoal)
  GOOGLE_DCHECK_NE(&from, this);
  const GripperPositionGoal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GripperPositionGoal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chessbot_simulator_control.GripperPositionGoal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chessbot_simulator_control.GripperPositionGoal)
    MergeFrom(*source);
  }
}

void GripperPositionGoal::MergeFrom(const GripperPositionGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chessbot_simulator_control.GripperPositionGoal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.position() <= 0 && from.position() >= 0)) {
    _internal_set_position(from._internal_position());
  }
}

void GripperPositionGoal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chessbot_simulator_control.GripperPositionGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GripperPositionGoal::CopyFrom(const GripperPositionGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chessbot_simulator_control.GripperPositionGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GripperPositionGoal::IsInitialized() const {
  return true;
}

void GripperPositionGoal::InternalSwap(GripperPositionGoal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(position_, other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GripperPositionGoal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GripperStateRequest::InitAsDefaultInstance() {
}
class GripperStateRequest::_Internal {
 public:
};

GripperStateRequest::GripperStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chessbot_simulator_control.GripperStateRequest)
}
GripperStateRequest::GripperStateRequest(const GripperStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chessbot_simulator_control.GripperStateRequest)
}

void GripperStateRequest::SharedCtor() {
}

GripperStateRequest::~GripperStateRequest() {
  // @@protoc_insertion_point(destructor:chessbot_simulator_control.GripperStateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GripperStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GripperStateRequest::ArenaDtor(void* object) {
  GripperStateRequest* _this = reinterpret_cast< GripperStateRequest* >(object);
  (void)_this;
}
void GripperStateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GripperStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GripperStateRequest& GripperStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GripperStateRequest_simulator_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void GripperStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chessbot_simulator_control.GripperStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GripperStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GripperStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chessbot_simulator_control.GripperStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chessbot_simulator_control.GripperStateRequest)
  return target;
}

size_t GripperStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chessbot_simulator_control.GripperStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GripperStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chessbot_simulator_control.GripperStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GripperStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GripperStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chessbot_simulator_control.GripperStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chessbot_simulator_control.GripperStateRequest)
    MergeFrom(*source);
  }
}

void GripperStateRequest::MergeFrom(const GripperStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chessbot_simulator_control.GripperStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GripperStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chessbot_simulator_control.GripperStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GripperStateRequest::CopyFrom(const GripperStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chessbot_simulator_control.GripperStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GripperStateRequest::IsInitialized() const {
  return true;
}

void GripperStateRequest::InternalSwap(GripperStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GripperStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotParameterRequest::InitAsDefaultInstance() {
}
class RobotParameterRequest::_Internal {
 public:
};

RobotParameterRequest::RobotParameterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chessbot_simulator_control.RobotParameterRequest)
}
RobotParameterRequest::RobotParameterRequest(const RobotParameterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chessbot_simulator_control.RobotParameterRequest)
}

void RobotParameterRequest::SharedCtor() {
}

RobotParameterRequest::~RobotParameterRequest() {
  // @@protoc_insertion_point(destructor:chessbot_simulator_control.RobotParameterRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotParameterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RobotParameterRequest::ArenaDtor(void* object) {
  RobotParameterRequest* _this = reinterpret_cast< RobotParameterRequest* >(object);
  (void)_this;
}
void RobotParameterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotParameterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotParameterRequest& RobotParameterRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotParameterRequest_simulator_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void RobotParameterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chessbot_simulator_control.RobotParameterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotParameterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotParameterRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chessbot_simulator_control.RobotParameterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chessbot_simulator_control.RobotParameterRequest)
  return target;
}

size_t RobotParameterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chessbot_simulator_control.RobotParameterRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotParameterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chessbot_simulator_control.RobotParameterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotParameterRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotParameterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chessbot_simulator_control.RobotParameterRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chessbot_simulator_control.RobotParameterRequest)
    MergeFrom(*source);
  }
}

void RobotParameterRequest::MergeFrom(const RobotParameterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chessbot_simulator_control.RobotParameterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RobotParameterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chessbot_simulator_control.RobotParameterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotParameterRequest::CopyFrom(const RobotParameterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chessbot_simulator_control.RobotParameterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotParameterRequest::IsInitialized() const {
  return true;
}

void RobotParameterRequest::InternalSwap(RobotParameterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotParameterRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Request::InitAsDefaultInstance() {
  ::chessbot_simulator_control::_Request_default_instance_._instance.get_mutable()->set_joint_position_ = const_cast< ::chessbot_simulator_control::JointPositionGoal*>(
      ::chessbot_simulator_control::JointPositionGoal::internal_default_instance());
  ::chessbot_simulator_control::_Request_default_instance_._instance.get_mutable()->set_joint_velocity_ = const_cast< ::chessbot_simulator_control::JointVelocityGoal*>(
      ::chessbot_simulator_control::JointVelocityGoal::internal_default_instance());
  ::chessbot_simulator_control::_Request_default_instance_._instance.get_mutable()->set_joint_torque_ = const_cast< ::chessbot_simulator_control::JointTorqueGoal*>(
      ::chessbot_simulator_control::JointTorqueGoal::internal_default_instance());
  ::chessbot_simulator_control::_Request_default_instance_._instance.get_mutable()->set_joint_position_by_axis_id_ = const_cast< ::chessbot_simulator_control::JointPositionGoalByAxisId*>(
      ::chessbot_simulator_control::JointPositionGoalByAxisId::internal_default_instance());
  ::chessbot_simulator_control::_Request_default_instance_._instance.get_mutable()->set_joint_velocity_by_axis_id_ = const_cast< ::chessbot_simulator_control::JointVelocityGoalByAxisId*>(
      ::chessbot_simulator_control::JointVelocityGoalByAxisId::internal_default_instance());
  ::chessbot_simulator_control::_Request_default_instance_._instance.get_mutable()->set_joint_torque_by_axis_id_ = const_cast< ::chessbot_simulator_control::JointTorqueGoalByAxisId*>(
      ::chessbot_simulator_control::JointTorqueGoalByAxisId::internal_default_instance());
  ::chessbot_simulator_control::_Request_default_instance_._instance.get_mutable()->get_joint_state_ = const_cast< ::chessbot_simulator_control::JointStateRequest*>(
      ::chessbot_simulator_control::JointStateRequest::internal_default_instance());
  ::chessbot_simulator_control::_Request_default_instance_._instance.get_mutable()->get_joint_state_by_axis_id_ = const_cast< ::chessbot_simulator_control::JointStateRequestByAxisId*>(
      ::chessbot_simulator_control::JointStateRequestByAxisId::internal_default_instance());
  ::chessbot_simulator_control::_Request_default_instance_._instance.get_mutable()->set_gripper_position_ = const_cast< ::chessbot_simulator_control::GripperPositionGoal*>(
      ::chessbot_simulator_control::GripperPositionGoal::internal_default_instance());
  ::chessbot_simulator_control::_Request_default_instance_._instance.get_mutable()->get_gripper_state_ = const_cast< ::chessbot_simulator_control::GripperStateRequest*>(
      ::chessbot_simulator_control::GripperStateRequest::internal_default_instance());
  ::chessbot_simulator_control::_Request_default_instance_._instance.get_mutable()->robot_parameter_get_ = const_cast< ::chessbot_simulator_control::RobotParameterRequest*>(
      ::chessbot_simulator_control::RobotParameterRequest::internal_default_instance());
}
class Request::_Internal {
 public:
  static const ::chessbot_simulator_control::JointPositionGoal& set_joint_position(const Request* msg);
  static const ::chessbot_simulator_control::JointVelocityGoal& set_joint_velocity(const Request* msg);
  static const ::chessbot_simulator_control::JointTorqueGoal& set_joint_torque(const Request* msg);
  static const ::chessbot_simulator_control::JointPositionGoalByAxisId& set_joint_position_by_axis_id(const Request* msg);
  static const ::chessbot_simulator_control::JointVelocityGoalByAxisId& set_joint_velocity_by_axis_id(const Request* msg);
  static const ::chessbot_simulator_control::JointTorqueGoalByAxisId& set_joint_torque_by_axis_id(const Request* msg);
  static const ::chessbot_simulator_control::JointStateRequest& get_joint_state(const Request* msg);
  static const ::chessbot_simulator_control::JointStateRequestByAxisId& get_joint_state_by_axis_id(const Request* msg);
  static const ::chessbot_simulator_control::GripperPositionGoal& set_gripper_position(const Request* msg);
  static const ::chessbot_simulator_control::GripperStateRequest& get_gripper_state(const Request* msg);
  static const ::chessbot_simulator_control::RobotParameterRequest& robot_parameter_get(const Request* msg);
};

const ::chessbot_simulator_control::JointPositionGoal&
Request::_Internal::set_joint_position(const Request* msg) {
  return *msg->set_joint_position_;
}
const ::chessbot_simulator_control::JointVelocityGoal&
Request::_Internal::set_joint_velocity(const Request* msg) {
  return *msg->set_joint_velocity_;
}
const ::chessbot_simulator_control::JointTorqueGoal&
Request::_Internal::set_joint_torque(const Request* msg) {
  return *msg->set_joint_torque_;
}
const ::chessbot_simulator_control::JointPositionGoalByAxisId&
Request::_Internal::set_joint_position_by_axis_id(const Request* msg) {
  return *msg->set_joint_position_by_axis_id_;
}
const ::chessbot_simulator_control::JointVelocityGoalByAxisId&
Request::_Internal::set_joint_velocity_by_axis_id(const Request* msg) {
  return *msg->set_joint_velocity_by_axis_id_;
}
const ::chessbot_simulator_control::JointTorqueGoalByAxisId&
Request::_Internal::set_joint_torque_by_axis_id(const Request* msg) {
  return *msg->set_joint_torque_by_axis_id_;
}
const ::chessbot_simulator_control::JointStateRequest&
Request::_Internal::get_joint_state(const Request* msg) {
  return *msg->get_joint_state_;
}
const ::chessbot_simulator_control::JointStateRequestByAxisId&
Request::_Internal::get_joint_state_by_axis_id(const Request* msg) {
  return *msg->get_joint_state_by_axis_id_;
}
const ::chessbot_simulator_control::GripperPositionGoal&
Request::_Internal::set_gripper_position(const Request* msg) {
  return *msg->set_gripper_position_;
}
const ::chessbot_simulator_control::GripperStateRequest&
Request::_Internal::get_gripper_state(const Request* msg) {
  return *msg->get_gripper_state_;
}
const ::chessbot_simulator_control::RobotParameterRequest&
Request::_Internal::robot_parameter_get(const Request* msg) {
  return *msg->robot_parameter_get_;
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chessbot_simulator_control.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_set_joint_position()) {
    set_joint_position_ = new ::chessbot_simulator_control::JointPositionGoal(*from.set_joint_position_);
  } else {
    set_joint_position_ = nullptr;
  }
  if (from._internal_has_set_joint_velocity()) {
    set_joint_velocity_ = new ::chessbot_simulator_control::JointVelocityGoal(*from.set_joint_velocity_);
  } else {
    set_joint_velocity_ = nullptr;
  }
  if (from._internal_has_set_joint_torque()) {
    set_joint_torque_ = new ::chessbot_simulator_control::JointTorqueGoal(*from.set_joint_torque_);
  } else {
    set_joint_torque_ = nullptr;
  }
  if (from._internal_has_set_joint_position_by_axis_id()) {
    set_joint_position_by_axis_id_ = new ::chessbot_simulator_control::JointPositionGoalByAxisId(*from.set_joint_position_by_axis_id_);
  } else {
    set_joint_position_by_axis_id_ = nullptr;
  }
  if (from._internal_has_set_joint_velocity_by_axis_id()) {
    set_joint_velocity_by_axis_id_ = new ::chessbot_simulator_control::JointVelocityGoalByAxisId(*from.set_joint_velocity_by_axis_id_);
  } else {
    set_joint_velocity_by_axis_id_ = nullptr;
  }
  if (from._internal_has_set_joint_torque_by_axis_id()) {
    set_joint_torque_by_axis_id_ = new ::chessbot_simulator_control::JointTorqueGoalByAxisId(*from.set_joint_torque_by_axis_id_);
  } else {
    set_joint_torque_by_axis_id_ = nullptr;
  }
  if (from._internal_has_get_joint_state()) {
    get_joint_state_ = new ::chessbot_simulator_control::JointStateRequest(*from.get_joint_state_);
  } else {
    get_joint_state_ = nullptr;
  }
  if (from._internal_has_get_joint_state_by_axis_id()) {
    get_joint_state_by_axis_id_ = new ::chessbot_simulator_control::JointStateRequestByAxisId(*from.get_joint_state_by_axis_id_);
  } else {
    get_joint_state_by_axis_id_ = nullptr;
  }
  if (from._internal_has_set_gripper_position()) {
    set_gripper_position_ = new ::chessbot_simulator_control::GripperPositionGoal(*from.set_gripper_position_);
  } else {
    set_gripper_position_ = nullptr;
  }
  if (from._internal_has_get_gripper_state()) {
    get_gripper_state_ = new ::chessbot_simulator_control::GripperStateRequest(*from.get_gripper_state_);
  } else {
    get_gripper_state_ = nullptr;
  }
  if (from._internal_has_robot_parameter_get()) {
    robot_parameter_get_ = new ::chessbot_simulator_control::RobotParameterRequest(*from.robot_parameter_get_);
  } else {
    robot_parameter_get_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:chessbot_simulator_control.Request)
}

void Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_simulator_5fcontrol_2eproto.base);
  ::memset(&set_joint_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&set_joint_position_)) + sizeof(type_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:chessbot_simulator_control.Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete set_joint_position_;
  if (this != internal_default_instance()) delete set_joint_velocity_;
  if (this != internal_default_instance()) delete set_joint_torque_;
  if (this != internal_default_instance()) delete set_joint_position_by_axis_id_;
  if (this != internal_default_instance()) delete set_joint_velocity_by_axis_id_;
  if (this != internal_default_instance()) delete set_joint_torque_by_axis_id_;
  if (this != internal_default_instance()) delete get_joint_state_;
  if (this != internal_default_instance()) delete get_joint_state_by_axis_id_;
  if (this != internal_default_instance()) delete set_gripper_position_;
  if (this != internal_default_instance()) delete get_gripper_state_;
  if (this != internal_default_instance()) delete robot_parameter_get_;
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_simulator_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:chessbot_simulator_control.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && set_joint_position_ != nullptr) {
    delete set_joint_position_;
  }
  set_joint_position_ = nullptr;
  if (GetArena() == nullptr && set_joint_velocity_ != nullptr) {
    delete set_joint_velocity_;
  }
  set_joint_velocity_ = nullptr;
  if (GetArena() == nullptr && set_joint_torque_ != nullptr) {
    delete set_joint_torque_;
  }
  set_joint_torque_ = nullptr;
  if (GetArena() == nullptr && set_joint_position_by_axis_id_ != nullptr) {
    delete set_joint_position_by_axis_id_;
  }
  set_joint_position_by_axis_id_ = nullptr;
  if (GetArena() == nullptr && set_joint_velocity_by_axis_id_ != nullptr) {
    delete set_joint_velocity_by_axis_id_;
  }
  set_joint_velocity_by_axis_id_ = nullptr;
  if (GetArena() == nullptr && set_joint_torque_by_axis_id_ != nullptr) {
    delete set_joint_torque_by_axis_id_;
  }
  set_joint_torque_by_axis_id_ = nullptr;
  if (GetArena() == nullptr && get_joint_state_ != nullptr) {
    delete get_joint_state_;
  }
  get_joint_state_ = nullptr;
  if (GetArena() == nullptr && get_joint_state_by_axis_id_ != nullptr) {
    delete get_joint_state_by_axis_id_;
  }
  get_joint_state_by_axis_id_ = nullptr;
  if (GetArena() == nullptr && set_gripper_position_ != nullptr) {
    delete set_gripper_position_;
  }
  set_gripper_position_ = nullptr;
  if (GetArena() == nullptr && get_gripper_state_ != nullptr) {
    delete get_gripper_state_;
  }
  get_gripper_state_ = nullptr;
  if (GetArena() == nullptr && robot_parameter_get_ != nullptr) {
    delete robot_parameter_get_;
  }
  robot_parameter_get_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .chessbot_simulator_control.Request.MessageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::chessbot_simulator_control::Request_MessageType>(val));
        } else goto handle_unusual;
        continue;
      // .chessbot_simulator_control.JointPositionGoal set_joint_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_joint_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chessbot_simulator_control.JointVelocityGoal set_joint_velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_joint_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chessbot_simulator_control.JointTorqueGoal set_joint_torque = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_joint_torque(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chessbot_simulator_control.JointPositionGoalByAxisId set_joint_position_by_axis_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_joint_position_by_axis_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chessbot_simulator_control.JointVelocityGoalByAxisId set_joint_velocity_by_axis_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_joint_velocity_by_axis_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chessbot_simulator_control.JointTorqueGoalByAxisId set_joint_torque_by_axis_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_joint_torque_by_axis_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chessbot_simulator_control.JointStateRequest get_joint_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_joint_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chessbot_simulator_control.JointStateRequestByAxisId get_joint_state_by_axis_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_joint_state_by_axis_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chessbot_simulator_control.GripperPositionGoal set_gripper_position = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_gripper_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chessbot_simulator_control.GripperStateRequest get_gripper_state = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_gripper_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chessbot_simulator_control.RobotParameterRequest robot_parameter_get = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_robot_parameter_get(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chessbot_simulator_control.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chessbot_simulator_control.Request.MessageType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .chessbot_simulator_control.JointPositionGoal set_joint_position = 2;
  if (this->has_set_joint_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::set_joint_position(this), target, stream);
  }

  // .chessbot_simulator_control.JointVelocityGoal set_joint_velocity = 3;
  if (this->has_set_joint_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::set_joint_velocity(this), target, stream);
  }

  // .chessbot_simulator_control.JointTorqueGoal set_joint_torque = 4;
  if (this->has_set_joint_torque()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::set_joint_torque(this), target, stream);
  }

  // .chessbot_simulator_control.JointPositionGoalByAxisId set_joint_position_by_axis_id = 5;
  if (this->has_set_joint_position_by_axis_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::set_joint_position_by_axis_id(this), target, stream);
  }

  // .chessbot_simulator_control.JointVelocityGoalByAxisId set_joint_velocity_by_axis_id = 6;
  if (this->has_set_joint_velocity_by_axis_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::set_joint_velocity_by_axis_id(this), target, stream);
  }

  // .chessbot_simulator_control.JointTorqueGoalByAxisId set_joint_torque_by_axis_id = 7;
  if (this->has_set_joint_torque_by_axis_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::set_joint_torque_by_axis_id(this), target, stream);
  }

  // .chessbot_simulator_control.JointStateRequest get_joint_state = 8;
  if (this->has_get_joint_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::get_joint_state(this), target, stream);
  }

  // .chessbot_simulator_control.JointStateRequestByAxisId get_joint_state_by_axis_id = 9;
  if (this->has_get_joint_state_by_axis_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::get_joint_state_by_axis_id(this), target, stream);
  }

  // .chessbot_simulator_control.GripperPositionGoal set_gripper_position = 10;
  if (this->has_set_gripper_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::set_gripper_position(this), target, stream);
  }

  // .chessbot_simulator_control.GripperStateRequest get_gripper_state = 11;
  if (this->has_get_gripper_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::get_gripper_state(this), target, stream);
  }

  // .chessbot_simulator_control.RobotParameterRequest robot_parameter_get = 12;
  if (this->has_robot_parameter_get()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::robot_parameter_get(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chessbot_simulator_control.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chessbot_simulator_control.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .chessbot_simulator_control.JointPositionGoal set_joint_position = 2;
  if (this->has_set_joint_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *set_joint_position_);
  }

  // .chessbot_simulator_control.JointVelocityGoal set_joint_velocity = 3;
  if (this->has_set_joint_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *set_joint_velocity_);
  }

  // .chessbot_simulator_control.JointTorqueGoal set_joint_torque = 4;
  if (this->has_set_joint_torque()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *set_joint_torque_);
  }

  // .chessbot_simulator_control.JointPositionGoalByAxisId set_joint_position_by_axis_id = 5;
  if (this->has_set_joint_position_by_axis_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *set_joint_position_by_axis_id_);
  }

  // .chessbot_simulator_control.JointVelocityGoalByAxisId set_joint_velocity_by_axis_id = 6;
  if (this->has_set_joint_velocity_by_axis_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *set_joint_velocity_by_axis_id_);
  }

  // .chessbot_simulator_control.JointTorqueGoalByAxisId set_joint_torque_by_axis_id = 7;
  if (this->has_set_joint_torque_by_axis_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *set_joint_torque_by_axis_id_);
  }

  // .chessbot_simulator_control.JointStateRequest get_joint_state = 8;
  if (this->has_get_joint_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_joint_state_);
  }

  // .chessbot_simulator_control.JointStateRequestByAxisId get_joint_state_by_axis_id = 9;
  if (this->has_get_joint_state_by_axis_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_joint_state_by_axis_id_);
  }

  // .chessbot_simulator_control.GripperPositionGoal set_gripper_position = 10;
  if (this->has_set_gripper_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *set_gripper_position_);
  }

  // .chessbot_simulator_control.GripperStateRequest get_gripper_state = 11;
  if (this->has_get_gripper_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_gripper_state_);
  }

  // .chessbot_simulator_control.RobotParameterRequest robot_parameter_get = 12;
  if (this->has_robot_parameter_get()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *robot_parameter_get_);
  }

  // .chessbot_simulator_control.Request.MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chessbot_simulator_control.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chessbot_simulator_control.Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chessbot_simulator_control.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chessbot_simulator_control.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_set_joint_position()) {
    _internal_mutable_set_joint_position()->::chessbot_simulator_control::JointPositionGoal::MergeFrom(from._internal_set_joint_position());
  }
  if (from.has_set_joint_velocity()) {
    _internal_mutable_set_joint_velocity()->::chessbot_simulator_control::JointVelocityGoal::MergeFrom(from._internal_set_joint_velocity());
  }
  if (from.has_set_joint_torque()) {
    _internal_mutable_set_joint_torque()->::chessbot_simulator_control::JointTorqueGoal::MergeFrom(from._internal_set_joint_torque());
  }
  if (from.has_set_joint_position_by_axis_id()) {
    _internal_mutable_set_joint_position_by_axis_id()->::chessbot_simulator_control::JointPositionGoalByAxisId::MergeFrom(from._internal_set_joint_position_by_axis_id());
  }
  if (from.has_set_joint_velocity_by_axis_id()) {
    _internal_mutable_set_joint_velocity_by_axis_id()->::chessbot_simulator_control::JointVelocityGoalByAxisId::MergeFrom(from._internal_set_joint_velocity_by_axis_id());
  }
  if (from.has_set_joint_torque_by_axis_id()) {
    _internal_mutable_set_joint_torque_by_axis_id()->::chessbot_simulator_control::JointTorqueGoalByAxisId::MergeFrom(from._internal_set_joint_torque_by_axis_id());
  }
  if (from.has_get_joint_state()) {
    _internal_mutable_get_joint_state()->::chessbot_simulator_control::JointStateRequest::MergeFrom(from._internal_get_joint_state());
  }
  if (from.has_get_joint_state_by_axis_id()) {
    _internal_mutable_get_joint_state_by_axis_id()->::chessbot_simulator_control::JointStateRequestByAxisId::MergeFrom(from._internal_get_joint_state_by_axis_id());
  }
  if (from.has_set_gripper_position()) {
    _internal_mutable_set_gripper_position()->::chessbot_simulator_control::GripperPositionGoal::MergeFrom(from._internal_set_gripper_position());
  }
  if (from.has_get_gripper_state()) {
    _internal_mutable_get_gripper_state()->::chessbot_simulator_control::GripperStateRequest::MergeFrom(from._internal_get_gripper_state());
  }
  if (from.has_robot_parameter_get()) {
    _internal_mutable_robot_parameter_get()->::chessbot_simulator_control::RobotParameterRequest::MergeFrom(from._internal_robot_parameter_get());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chessbot_simulator_control.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chessbot_simulator_control.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request, type_)
      + sizeof(Request::type_)
      - PROTOBUF_FIELD_OFFSET(Request, set_joint_position_)>(
          reinterpret_cast<char*>(&set_joint_position_),
          reinterpret_cast<char*>(&other->set_joint_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JointPositionLimit::InitAsDefaultInstance() {
}
class JointPositionLimit::_Internal {
 public:
};

JointPositionLimit::JointPositionLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chessbot_simulator_control.JointPositionLimit)
}
JointPositionLimit::JointPositionLimit(const JointPositionLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&upper_limit_, &from.upper_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&lower_limit_) -
    reinterpret_cast<char*>(&upper_limit_)) + sizeof(lower_limit_));
  // @@protoc_insertion_point(copy_constructor:chessbot_simulator_control.JointPositionLimit)
}

void JointPositionLimit::SharedCtor() {
  ::memset(&upper_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lower_limit_) -
      reinterpret_cast<char*>(&upper_limit_)) + sizeof(lower_limit_));
}

JointPositionLimit::~JointPositionLimit() {
  // @@protoc_insertion_point(destructor:chessbot_simulator_control.JointPositionLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JointPositionLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JointPositionLimit::ArenaDtor(void* object) {
  JointPositionLimit* _this = reinterpret_cast< JointPositionLimit* >(object);
  (void)_this;
}
void JointPositionLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JointPositionLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JointPositionLimit& JointPositionLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JointPositionLimit_simulator_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void JointPositionLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:chessbot_simulator_control.JointPositionLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&upper_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lower_limit_) -
      reinterpret_cast<char*>(&upper_limit_)) + sizeof(lower_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointPositionLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double upper_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          upper_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lower_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          lower_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JointPositionLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chessbot_simulator_control.JointPositionLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double upper_limit = 1;
  if (!(this->upper_limit() <= 0 && this->upper_limit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_upper_limit(), target);
  }

  // double lower_limit = 2;
  if (!(this->lower_limit() <= 0 && this->lower_limit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lower_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chessbot_simulator_control.JointPositionLimit)
  return target;
}

size_t JointPositionLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chessbot_simulator_control.JointPositionLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double upper_limit = 1;
  if (!(this->upper_limit() <= 0 && this->upper_limit() >= 0)) {
    total_size += 1 + 8;
  }

  // double lower_limit = 2;
  if (!(this->lower_limit() <= 0 && this->lower_limit() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointPositionLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chessbot_simulator_control.JointPositionLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const JointPositionLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JointPositionLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chessbot_simulator_control.JointPositionLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chessbot_simulator_control.JointPositionLimit)
    MergeFrom(*source);
  }
}

void JointPositionLimit::MergeFrom(const JointPositionLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chessbot_simulator_control.JointPositionLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.upper_limit() <= 0 && from.upper_limit() >= 0)) {
    _internal_set_upper_limit(from._internal_upper_limit());
  }
  if (!(from.lower_limit() <= 0 && from.lower_limit() >= 0)) {
    _internal_set_lower_limit(from._internal_lower_limit());
  }
}

void JointPositionLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chessbot_simulator_control.JointPositionLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointPositionLimit::CopyFrom(const JointPositionLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chessbot_simulator_control.JointPositionLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointPositionLimit::IsInitialized() const {
  return true;
}

void JointPositionLimit::InternalSwap(JointPositionLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JointPositionLimit, lower_limit_)
      + sizeof(JointPositionLimit::lower_limit_)
      - PROTOBUF_FIELD_OFFSET(JointPositionLimit, upper_limit_)>(
          reinterpret_cast<char*>(&upper_limit_),
          reinterpret_cast<char*>(&other->upper_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JointPositionLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JointVelocityLimit::InitAsDefaultInstance() {
}
class JointVelocityLimit::_Internal {
 public:
};

JointVelocityLimit::JointVelocityLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chessbot_simulator_control.JointVelocityLimit)
}
JointVelocityLimit::JointVelocityLimit(const JointVelocityLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&upper_limit_, &from.upper_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&lower_limit_) -
    reinterpret_cast<char*>(&upper_limit_)) + sizeof(lower_limit_));
  // @@protoc_insertion_point(copy_constructor:chessbot_simulator_control.JointVelocityLimit)
}

void JointVelocityLimit::SharedCtor() {
  ::memset(&upper_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lower_limit_) -
      reinterpret_cast<char*>(&upper_limit_)) + sizeof(lower_limit_));
}

JointVelocityLimit::~JointVelocityLimit() {
  // @@protoc_insertion_point(destructor:chessbot_simulator_control.JointVelocityLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JointVelocityLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JointVelocityLimit::ArenaDtor(void* object) {
  JointVelocityLimit* _this = reinterpret_cast< JointVelocityLimit* >(object);
  (void)_this;
}
void JointVelocityLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JointVelocityLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JointVelocityLimit& JointVelocityLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JointVelocityLimit_simulator_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void JointVelocityLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:chessbot_simulator_control.JointVelocityLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&upper_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lower_limit_) -
      reinterpret_cast<char*>(&upper_limit_)) + sizeof(lower_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointVelocityLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double upper_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          upper_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lower_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          lower_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JointVelocityLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chessbot_simulator_control.JointVelocityLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double upper_limit = 1;
  if (!(this->upper_limit() <= 0 && this->upper_limit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_upper_limit(), target);
  }

  // double lower_limit = 2;
  if (!(this->lower_limit() <= 0 && this->lower_limit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lower_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chessbot_simulator_control.JointVelocityLimit)
  return target;
}

size_t JointVelocityLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chessbot_simulator_control.JointVelocityLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double upper_limit = 1;
  if (!(this->upper_limit() <= 0 && this->upper_limit() >= 0)) {
    total_size += 1 + 8;
  }

  // double lower_limit = 2;
  if (!(this->lower_limit() <= 0 && this->lower_limit() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointVelocityLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chessbot_simulator_control.JointVelocityLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const JointVelocityLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JointVelocityLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chessbot_simulator_control.JointVelocityLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chessbot_simulator_control.JointVelocityLimit)
    MergeFrom(*source);
  }
}

void JointVelocityLimit::MergeFrom(const JointVelocityLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chessbot_simulator_control.JointVelocityLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.upper_limit() <= 0 && from.upper_limit() >= 0)) {
    _internal_set_upper_limit(from._internal_upper_limit());
  }
  if (!(from.lower_limit() <= 0 && from.lower_limit() >= 0)) {
    _internal_set_lower_limit(from._internal_lower_limit());
  }
}

void JointVelocityLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chessbot_simulator_control.JointVelocityLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointVelocityLimit::CopyFrom(const JointVelocityLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chessbot_simulator_control.JointVelocityLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointVelocityLimit::IsInitialized() const {
  return true;
}

void JointVelocityLimit::InternalSwap(JointVelocityLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JointVelocityLimit, lower_limit_)
      + sizeof(JointVelocityLimit::lower_limit_)
      - PROTOBUF_FIELD_OFFSET(JointVelocityLimit, upper_limit_)>(
          reinterpret_cast<char*>(&upper_limit_),
          reinterpret_cast<char*>(&other->upper_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JointVelocityLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JointEffortLimit::InitAsDefaultInstance() {
}
class JointEffortLimit::_Internal {
 public:
};

JointEffortLimit::JointEffortLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chessbot_simulator_control.JointEffortLimit)
}
JointEffortLimit::JointEffortLimit(const JointEffortLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&upper_limit_, &from.upper_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&lower_limit_) -
    reinterpret_cast<char*>(&upper_limit_)) + sizeof(lower_limit_));
  // @@protoc_insertion_point(copy_constructor:chessbot_simulator_control.JointEffortLimit)
}

void JointEffortLimit::SharedCtor() {
  ::memset(&upper_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lower_limit_) -
      reinterpret_cast<char*>(&upper_limit_)) + sizeof(lower_limit_));
}

JointEffortLimit::~JointEffortLimit() {
  // @@protoc_insertion_point(destructor:chessbot_simulator_control.JointEffortLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JointEffortLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JointEffortLimit::ArenaDtor(void* object) {
  JointEffortLimit* _this = reinterpret_cast< JointEffortLimit* >(object);
  (void)_this;
}
void JointEffortLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JointEffortLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JointEffortLimit& JointEffortLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JointEffortLimit_simulator_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void JointEffortLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:chessbot_simulator_control.JointEffortLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&upper_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lower_limit_) -
      reinterpret_cast<char*>(&upper_limit_)) + sizeof(lower_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointEffortLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double upper_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          upper_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lower_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          lower_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JointEffortLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chessbot_simulator_control.JointEffortLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double upper_limit = 1;
  if (!(this->upper_limit() <= 0 && this->upper_limit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_upper_limit(), target);
  }

  // double lower_limit = 2;
  if (!(this->lower_limit() <= 0 && this->lower_limit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lower_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chessbot_simulator_control.JointEffortLimit)
  return target;
}

size_t JointEffortLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chessbot_simulator_control.JointEffortLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double upper_limit = 1;
  if (!(this->upper_limit() <= 0 && this->upper_limit() >= 0)) {
    total_size += 1 + 8;
  }

  // double lower_limit = 2;
  if (!(this->lower_limit() <= 0 && this->lower_limit() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointEffortLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chessbot_simulator_control.JointEffortLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const JointEffortLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JointEffortLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chessbot_simulator_control.JointEffortLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chessbot_simulator_control.JointEffortLimit)
    MergeFrom(*source);
  }
}

void JointEffortLimit::MergeFrom(const JointEffortLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chessbot_simulator_control.JointEffortLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.upper_limit() <= 0 && from.upper_limit() >= 0)) {
    _internal_set_upper_limit(from._internal_upper_limit());
  }
  if (!(from.lower_limit() <= 0 && from.lower_limit() >= 0)) {
    _internal_set_lower_limit(from._internal_lower_limit());
  }
}

void JointEffortLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chessbot_simulator_control.JointEffortLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointEffortLimit::CopyFrom(const JointEffortLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chessbot_simulator_control.JointEffortLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointEffortLimit::IsInitialized() const {
  return true;
}

void JointEffortLimit::InternalSwap(JointEffortLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JointEffortLimit, lower_limit_)
      + sizeof(JointEffortLimit::lower_limit_)
      - PROTOBUF_FIELD_OFFSET(JointEffortLimit, upper_limit_)>(
          reinterpret_cast<char*>(&upper_limit_),
          reinterpret_cast<char*>(&other->upper_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JointEffortLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JointLimit::InitAsDefaultInstance() {
  ::chessbot_simulator_control::_JointLimit_default_instance_._instance.get_mutable()->position_limit_ = const_cast< ::chessbot_simulator_control::JointPositionLimit*>(
      ::chessbot_simulator_control::JointPositionLimit::internal_default_instance());
  ::chessbot_simulator_control::_JointLimit_default_instance_._instance.get_mutable()->velocity_limit_ = const_cast< ::chessbot_simulator_control::JointVelocityLimit*>(
      ::chessbot_simulator_control::JointVelocityLimit::internal_default_instance());
  ::chessbot_simulator_control::_JointLimit_default_instance_._instance.get_mutable()->effort_limit_ = const_cast< ::chessbot_simulator_control::JointEffortLimit*>(
      ::chessbot_simulator_control::JointEffortLimit::internal_default_instance());
}
class JointLimit::_Internal {
 public:
  static const ::chessbot_simulator_control::JointPositionLimit& position_limit(const JointLimit* msg);
  static const ::chessbot_simulator_control::JointVelocityLimit& velocity_limit(const JointLimit* msg);
  static const ::chessbot_simulator_control::JointEffortLimit& effort_limit(const JointLimit* msg);
};

const ::chessbot_simulator_control::JointPositionLimit&
JointLimit::_Internal::position_limit(const JointLimit* msg) {
  return *msg->position_limit_;
}
const ::chessbot_simulator_control::JointVelocityLimit&
JointLimit::_Internal::velocity_limit(const JointLimit* msg) {
  return *msg->velocity_limit_;
}
const ::chessbot_simulator_control::JointEffortLimit&
JointLimit::_Internal::effort_limit(const JointLimit* msg) {
  return *msg->effort_limit_;
}
JointLimit::JointLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chessbot_simulator_control.JointLimit)
}
JointLimit::JointLimit(const JointLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position_limit()) {
    position_limit_ = new ::chessbot_simulator_control::JointPositionLimit(*from.position_limit_);
  } else {
    position_limit_ = nullptr;
  }
  if (from._internal_has_velocity_limit()) {
    velocity_limit_ = new ::chessbot_simulator_control::JointVelocityLimit(*from.velocity_limit_);
  } else {
    velocity_limit_ = nullptr;
  }
  if (from._internal_has_effort_limit()) {
    effort_limit_ = new ::chessbot_simulator_control::JointEffortLimit(*from.effort_limit_);
  } else {
    effort_limit_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:chessbot_simulator_control.JointLimit)
}

void JointLimit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JointLimit_simulator_5fcontrol_2eproto.base);
  ::memset(&position_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&position_limit_)) + sizeof(type_));
}

JointLimit::~JointLimit() {
  // @@protoc_insertion_point(destructor:chessbot_simulator_control.JointLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JointLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_limit_;
  if (this != internal_default_instance()) delete velocity_limit_;
  if (this != internal_default_instance()) delete effort_limit_;
}

void JointLimit::ArenaDtor(void* object) {
  JointLimit* _this = reinterpret_cast< JointLimit* >(object);
  (void)_this;
}
void JointLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JointLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JointLimit& JointLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JointLimit_simulator_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void JointLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:chessbot_simulator_control.JointLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_limit_ != nullptr) {
    delete position_limit_;
  }
  position_limit_ = nullptr;
  if (GetArena() == nullptr && velocity_limit_ != nullptr) {
    delete velocity_limit_;
  }
  velocity_limit_ = nullptr;
  if (GetArena() == nullptr && effort_limit_ != nullptr) {
    delete effort_limit_;
  }
  effort_limit_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .chessbot_simulator_control.JointLimit.JointType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::chessbot_simulator_control::JointLimit_JointType>(val));
        } else goto handle_unusual;
        continue;
      // .chessbot_simulator_control.JointPositionLimit position_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chessbot_simulator_control.JointVelocityLimit velocity_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chessbot_simulator_control.JointEffortLimit effort_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_effort_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JointLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chessbot_simulator_control.JointLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chessbot_simulator_control.JointLimit.JointType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .chessbot_simulator_control.JointPositionLimit position_limit = 2;
  if (this->has_position_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position_limit(this), target, stream);
  }

  // .chessbot_simulator_control.JointVelocityLimit velocity_limit = 3;
  if (this->has_velocity_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::velocity_limit(this), target, stream);
  }

  // .chessbot_simulator_control.JointEffortLimit effort_limit = 4;
  if (this->has_effort_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::effort_limit(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chessbot_simulator_control.JointLimit)
  return target;
}

size_t JointLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chessbot_simulator_control.JointLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .chessbot_simulator_control.JointPositionLimit position_limit = 2;
  if (this->has_position_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_limit_);
  }

  // .chessbot_simulator_control.JointVelocityLimit velocity_limit = 3;
  if (this->has_velocity_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_limit_);
  }

  // .chessbot_simulator_control.JointEffortLimit effort_limit = 4;
  if (this->has_effort_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *effort_limit_);
  }

  // .chessbot_simulator_control.JointLimit.JointType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chessbot_simulator_control.JointLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const JointLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JointLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chessbot_simulator_control.JointLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chessbot_simulator_control.JointLimit)
    MergeFrom(*source);
  }
}

void JointLimit::MergeFrom(const JointLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chessbot_simulator_control.JointLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position_limit()) {
    _internal_mutable_position_limit()->::chessbot_simulator_control::JointPositionLimit::MergeFrom(from._internal_position_limit());
  }
  if (from.has_velocity_limit()) {
    _internal_mutable_velocity_limit()->::chessbot_simulator_control::JointVelocityLimit::MergeFrom(from._internal_velocity_limit());
  }
  if (from.has_effort_limit()) {
    _internal_mutable_effort_limit()->::chessbot_simulator_control::JointEffortLimit::MergeFrom(from._internal_effort_limit());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void JointLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chessbot_simulator_control.JointLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointLimit::CopyFrom(const JointLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chessbot_simulator_control.JointLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointLimit::IsInitialized() const {
  return true;
}

void JointLimit::InternalSwap(JointLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JointLimit, type_)
      + sizeof(JointLimit::type_)
      - PROTOBUF_FIELD_OFFSET(JointLimit, position_limit_)>(
          reinterpret_cast<char*>(&position_limit_),
          reinterpret_cast<char*>(&other->position_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JointLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotParameter::InitAsDefaultInstance() {
}
class RobotParameter::_Internal {
 public:
};

RobotParameter::RobotParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  joint_limit_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chessbot_simulator_control.RobotParameter)
}
RobotParameter::RobotParameter(const RobotParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      joint_limit_(from.joint_limit_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  axes_number_ = from.axes_number_;
  // @@protoc_insertion_point(copy_constructor:chessbot_simulator_control.RobotParameter)
}

void RobotParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotParameter_simulator_5fcontrol_2eproto.base);
  axes_number_ = 0;
}

RobotParameter::~RobotParameter() {
  // @@protoc_insertion_point(destructor:chessbot_simulator_control.RobotParameter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RobotParameter::ArenaDtor(void* object) {
  RobotParameter* _this = reinterpret_cast< RobotParameter* >(object);
  (void)_this;
}
void RobotParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotParameter& RobotParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotParameter_simulator_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void RobotParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:chessbot_simulator_control.RobotParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joint_limit_.Clear();
  axes_number_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 axes_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axes_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .chessbot_simulator_control.JointLimit joint_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_joint_limit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chessbot_simulator_control.RobotParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 axes_number = 1;
  if (this->axes_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axes_number(), target);
  }

  // repeated .chessbot_simulator_control.JointLimit joint_limit = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_joint_limit_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_joint_limit(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chessbot_simulator_control.RobotParameter)
  return target;
}

size_t RobotParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chessbot_simulator_control.RobotParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .chessbot_simulator_control.JointLimit joint_limit = 2;
  total_size += 1UL * this->_internal_joint_limit_size();
  for (const auto& msg : this->joint_limit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 axes_number = 1;
  if (this->axes_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axes_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chessbot_simulator_control.RobotParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chessbot_simulator_control.RobotParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chessbot_simulator_control.RobotParameter)
    MergeFrom(*source);
  }
}

void RobotParameter::MergeFrom(const RobotParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chessbot_simulator_control.RobotParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joint_limit_.MergeFrom(from.joint_limit_);
  if (from.axes_number() != 0) {
    _internal_set_axes_number(from._internal_axes_number());
  }
}

void RobotParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chessbot_simulator_control.RobotParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotParameter::CopyFrom(const RobotParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chessbot_simulator_control.RobotParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotParameter::IsInitialized() const {
  return true;
}

void RobotParameter::InternalSwap(RobotParameter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  joint_limit_.InternalSwap(&other->joint_limit_);
  swap(axes_number_, other->axes_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JointState::InitAsDefaultInstance() {
}
class JointState::_Internal {
 public:
};

JointState::JointState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chessbot_simulator_control.JointState)
}
JointState::JointState(const JointState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&axis_id_) -
    reinterpret_cast<char*>(&position_)) + sizeof(axis_id_));
  // @@protoc_insertion_point(copy_constructor:chessbot_simulator_control.JointState)
}

void JointState::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&axis_id_) -
      reinterpret_cast<char*>(&position_)) + sizeof(axis_id_));
}

JointState::~JointState() {
  // @@protoc_insertion_point(destructor:chessbot_simulator_control.JointState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JointState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JointState::ArenaDtor(void* object) {
  JointState* _this = reinterpret_cast< JointState* >(object);
  (void)_this;
}
void JointState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JointState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JointState& JointState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JointState_simulator_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void JointState::Clear() {
// @@protoc_insertion_point(message_clear_start:chessbot_simulator_control.JointState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&axis_id_) -
      reinterpret_cast<char*>(&position_)) + sizeof(axis_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 axis_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axis_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double torque = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JointState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chessbot_simulator_control.JointState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 axis_id = 1;
  if (this->axis_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis_id(), target);
  }

  // double position = 2;
  if (!(this->position() <= 0 && this->position() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_position(), target);
  }

  // double velocity = 3;
  if (!(this->velocity() <= 0 && this->velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_velocity(), target);
  }

  // double torque = 4;
  if (!(this->torque() <= 0 && this->torque() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_torque(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chessbot_simulator_control.JointState)
  return target;
}

size_t JointState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chessbot_simulator_control.JointState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double position = 2;
  if (!(this->position() <= 0 && this->position() >= 0)) {
    total_size += 1 + 8;
  }

  // double velocity = 3;
  if (!(this->velocity() <= 0 && this->velocity() >= 0)) {
    total_size += 1 + 8;
  }

  // double torque = 4;
  if (!(this->torque() <= 0 && this->torque() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 axis_id = 1;
  if (this->axis_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axis_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chessbot_simulator_control.JointState)
  GOOGLE_DCHECK_NE(&from, this);
  const JointState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JointState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chessbot_simulator_control.JointState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chessbot_simulator_control.JointState)
    MergeFrom(*source);
  }
}

void JointState::MergeFrom(const JointState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chessbot_simulator_control.JointState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.position() <= 0 && from.position() >= 0)) {
    _internal_set_position(from._internal_position());
  }
  if (!(from.velocity() <= 0 && from.velocity() >= 0)) {
    _internal_set_velocity(from._internal_velocity());
  }
  if (!(from.torque() <= 0 && from.torque() >= 0)) {
    _internal_set_torque(from._internal_torque());
  }
  if (from.axis_id() != 0) {
    _internal_set_axis_id(from._internal_axis_id());
  }
}

void JointState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chessbot_simulator_control.JointState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointState::CopyFrom(const JointState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chessbot_simulator_control.JointState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointState::IsInitialized() const {
  return true;
}

void JointState::InternalSwap(JointState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JointState, axis_id_)
      + sizeof(JointState::axis_id_)
      - PROTOBUF_FIELD_OFFSET(JointState, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JointState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JointStates::InitAsDefaultInstance() {
}
class JointStates::_Internal {
 public:
};

JointStates::JointStates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  states_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chessbot_simulator_control.JointStates)
}
JointStates::JointStates(const JointStates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      states_(from.states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chessbot_simulator_control.JointStates)
}

void JointStates::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JointStates_simulator_5fcontrol_2eproto.base);
}

JointStates::~JointStates() {
  // @@protoc_insertion_point(destructor:chessbot_simulator_control.JointStates)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JointStates::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JointStates::ArenaDtor(void* object) {
  JointStates* _this = reinterpret_cast< JointStates* >(object);
  (void)_this;
}
void JointStates::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JointStates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JointStates& JointStates::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JointStates_simulator_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void JointStates::Clear() {
// @@protoc_insertion_point(message_clear_start:chessbot_simulator_control.JointStates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointStates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .chessbot_simulator_control.JointState states = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JointStates::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chessbot_simulator_control.JointStates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chessbot_simulator_control.JointState states = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_states(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chessbot_simulator_control.JointStates)
  return target;
}

size_t JointStates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chessbot_simulator_control.JointStates)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .chessbot_simulator_control.JointState states = 1;
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointStates::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chessbot_simulator_control.JointStates)
  GOOGLE_DCHECK_NE(&from, this);
  const JointStates* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JointStates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chessbot_simulator_control.JointStates)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chessbot_simulator_control.JointStates)
    MergeFrom(*source);
  }
}

void JointStates::MergeFrom(const JointStates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chessbot_simulator_control.JointStates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
}

void JointStates::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chessbot_simulator_control.JointStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointStates::CopyFrom(const JointStates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chessbot_simulator_control.JointStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointStates::IsInitialized() const {
  return true;
}

void JointStates::InternalSwap(JointStates* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  states_.InternalSwap(&other->states_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JointStates::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GripperState::InitAsDefaultInstance() {
}
class GripperState::_Internal {
 public:
};

GripperState::GripperState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chessbot_simulator_control.GripperState)
}
GripperState::GripperState(const GripperState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  position_ = from.position_;
  // @@protoc_insertion_point(copy_constructor:chessbot_simulator_control.GripperState)
}

void GripperState::SharedCtor() {
  position_ = 0;
}

GripperState::~GripperState() {
  // @@protoc_insertion_point(destructor:chessbot_simulator_control.GripperState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GripperState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GripperState::ArenaDtor(void* object) {
  GripperState* _this = reinterpret_cast< GripperState* >(object);
  (void)_this;
}
void GripperState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GripperState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GripperState& GripperState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GripperState_simulator_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void GripperState::Clear() {
// @@protoc_insertion_point(message_clear_start:chessbot_simulator_control.GripperState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GripperState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GripperState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chessbot_simulator_control.GripperState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double position = 1;
  if (!(this->position() <= 0 && this->position() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chessbot_simulator_control.GripperState)
  return target;
}

size_t GripperState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chessbot_simulator_control.GripperState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double position = 1;
  if (!(this->position() <= 0 && this->position() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GripperState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chessbot_simulator_control.GripperState)
  GOOGLE_DCHECK_NE(&from, this);
  const GripperState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GripperState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chessbot_simulator_control.GripperState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chessbot_simulator_control.GripperState)
    MergeFrom(*source);
  }
}

void GripperState::MergeFrom(const GripperState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chessbot_simulator_control.GripperState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.position() <= 0 && from.position() >= 0)) {
    _internal_set_position(from._internal_position());
  }
}

void GripperState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chessbot_simulator_control.GripperState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GripperState::CopyFrom(const GripperState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chessbot_simulator_control.GripperState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GripperState::IsInitialized() const {
  return true;
}

void GripperState::InternalSwap(GripperState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(position_, other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GripperState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Acknowledge::InitAsDefaultInstance() {
}
class Acknowledge::_Internal {
 public:
};

Acknowledge::Acknowledge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chessbot_simulator_control.Acknowledge)
}
Acknowledge::Acknowledge(const Acknowledge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  acknowledge_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_acknowledge().empty()) {
    acknowledge_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_acknowledge(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:chessbot_simulator_control.Acknowledge)
}

void Acknowledge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Acknowledge_simulator_5fcontrol_2eproto.base);
  acknowledge_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Acknowledge::~Acknowledge() {
  // @@protoc_insertion_point(destructor:chessbot_simulator_control.Acknowledge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Acknowledge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  acknowledge_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Acknowledge::ArenaDtor(void* object) {
  Acknowledge* _this = reinterpret_cast< Acknowledge* >(object);
  (void)_this;
}
void Acknowledge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Acknowledge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Acknowledge& Acknowledge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Acknowledge_simulator_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void Acknowledge::Clear() {
// @@protoc_insertion_point(message_clear_start:chessbot_simulator_control.Acknowledge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acknowledge_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Acknowledge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string acknowledge = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_acknowledge();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chessbot_simulator_control.Acknowledge.acknowledge"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Acknowledge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chessbot_simulator_control.Acknowledge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string acknowledge = 1;
  if (this->acknowledge().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_acknowledge().data(), static_cast<int>(this->_internal_acknowledge().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chessbot_simulator_control.Acknowledge.acknowledge");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_acknowledge(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chessbot_simulator_control.Acknowledge)
  return target;
}

size_t Acknowledge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chessbot_simulator_control.Acknowledge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string acknowledge = 1;
  if (this->acknowledge().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_acknowledge());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Acknowledge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chessbot_simulator_control.Acknowledge)
  GOOGLE_DCHECK_NE(&from, this);
  const Acknowledge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Acknowledge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chessbot_simulator_control.Acknowledge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chessbot_simulator_control.Acknowledge)
    MergeFrom(*source);
  }
}

void Acknowledge::MergeFrom(const Acknowledge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chessbot_simulator_control.Acknowledge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.acknowledge().size() > 0) {
    _internal_set_acknowledge(from._internal_acknowledge());
  }
}

void Acknowledge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chessbot_simulator_control.Acknowledge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Acknowledge::CopyFrom(const Acknowledge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chessbot_simulator_control.Acknowledge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Acknowledge::IsInitialized() const {
  return true;
}

void Acknowledge::InternalSwap(Acknowledge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  acknowledge_.Swap(&other->acknowledge_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Acknowledge::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chessbot_simulator_control
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chessbot_simulator_control::JointPositionGoal* Arena::CreateMaybeMessage< ::chessbot_simulator_control::JointPositionGoal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chessbot_simulator_control::JointPositionGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::chessbot_simulator_control::JointVelocityGoal* Arena::CreateMaybeMessage< ::chessbot_simulator_control::JointVelocityGoal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chessbot_simulator_control::JointVelocityGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::chessbot_simulator_control::JointTorqueGoal* Arena::CreateMaybeMessage< ::chessbot_simulator_control::JointTorqueGoal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chessbot_simulator_control::JointTorqueGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::chessbot_simulator_control::JointPositionGoalByAxisId* Arena::CreateMaybeMessage< ::chessbot_simulator_control::JointPositionGoalByAxisId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chessbot_simulator_control::JointPositionGoalByAxisId >(arena);
}
template<> PROTOBUF_NOINLINE ::chessbot_simulator_control::JointVelocityGoalByAxisId* Arena::CreateMaybeMessage< ::chessbot_simulator_control::JointVelocityGoalByAxisId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chessbot_simulator_control::JointVelocityGoalByAxisId >(arena);
}
template<> PROTOBUF_NOINLINE ::chessbot_simulator_control::JointTorqueGoalByAxisId* Arena::CreateMaybeMessage< ::chessbot_simulator_control::JointTorqueGoalByAxisId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chessbot_simulator_control::JointTorqueGoalByAxisId >(arena);
}
template<> PROTOBUF_NOINLINE ::chessbot_simulator_control::JointStateRequest* Arena::CreateMaybeMessage< ::chessbot_simulator_control::JointStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chessbot_simulator_control::JointStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::chessbot_simulator_control::JointStateRequestByAxisId* Arena::CreateMaybeMessage< ::chessbot_simulator_control::JointStateRequestByAxisId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chessbot_simulator_control::JointStateRequestByAxisId >(arena);
}
template<> PROTOBUF_NOINLINE ::chessbot_simulator_control::GripperPositionGoal* Arena::CreateMaybeMessage< ::chessbot_simulator_control::GripperPositionGoal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chessbot_simulator_control::GripperPositionGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::chessbot_simulator_control::GripperStateRequest* Arena::CreateMaybeMessage< ::chessbot_simulator_control::GripperStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chessbot_simulator_control::GripperStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::chessbot_simulator_control::RobotParameterRequest* Arena::CreateMaybeMessage< ::chessbot_simulator_control::RobotParameterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chessbot_simulator_control::RobotParameterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::chessbot_simulator_control::Request* Arena::CreateMaybeMessage< ::chessbot_simulator_control::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chessbot_simulator_control::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::chessbot_simulator_control::JointPositionLimit* Arena::CreateMaybeMessage< ::chessbot_simulator_control::JointPositionLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chessbot_simulator_control::JointPositionLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::chessbot_simulator_control::JointVelocityLimit* Arena::CreateMaybeMessage< ::chessbot_simulator_control::JointVelocityLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chessbot_simulator_control::JointVelocityLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::chessbot_simulator_control::JointEffortLimit* Arena::CreateMaybeMessage< ::chessbot_simulator_control::JointEffortLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chessbot_simulator_control::JointEffortLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::chessbot_simulator_control::JointLimit* Arena::CreateMaybeMessage< ::chessbot_simulator_control::JointLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chessbot_simulator_control::JointLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::chessbot_simulator_control::RobotParameter* Arena::CreateMaybeMessage< ::chessbot_simulator_control::RobotParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chessbot_simulator_control::RobotParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::chessbot_simulator_control::JointState* Arena::CreateMaybeMessage< ::chessbot_simulator_control::JointState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chessbot_simulator_control::JointState >(arena);
}
template<> PROTOBUF_NOINLINE ::chessbot_simulator_control::JointStates* Arena::CreateMaybeMessage< ::chessbot_simulator_control::JointStates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chessbot_simulator_control::JointStates >(arena);
}
template<> PROTOBUF_NOINLINE ::chessbot_simulator_control::GripperState* Arena::CreateMaybeMessage< ::chessbot_simulator_control::GripperState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chessbot_simulator_control::GripperState >(arena);
}
template<> PROTOBUF_NOINLINE ::chessbot_simulator_control::Acknowledge* Arena::CreateMaybeMessage< ::chessbot_simulator_control::Acknowledge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chessbot_simulator_control::Acknowledge >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
